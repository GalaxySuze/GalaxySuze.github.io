<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.zhangajian.com</id>
    <title>张阿简博客</title>
    <updated>2021-12-05T09:11:49.010Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.zhangajian.com"/>
    <link rel="self" href="https://www.zhangajian.com/atom.xml"/>
    <subtitle>Kill Time, Or Kiss Time</subtitle>
    <logo>https://www.zhangajian.com/images/avatar.png</logo>
    <icon>https://www.zhangajian.com/favicon.ico</icon>
    <rights>All rights reserved 2021, 张阿简博客</rights>
    <entry>
        <title type="html"><![CDATA[再见，2019]]></title>
        <id>https://www.zhangajian.com/post/zai-jian-2019/</id>
        <link href="https://www.zhangajian.com/post/zai-jian-2019/">
        </link>
        <updated>2019-12-29T01:47:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题记">题记</h1>
<p>2019，21世纪10年代最后一个年头将要告别，小时候看的科幻小说中的2020年如约而至。<br>
韶华易逝，再见已是二十六。同岁人有已结婚生子，有仍考学问读，有初入社会，也有工薪数年。新晨将始，朝花夕拾，2019的青春也该有些总结。</p>
<h1 id="虚度">虚度</h1>
<p>今年年初，想过一个问题，人之入世，我们从一开始并不知道自己想要的是什么？成为什么样的人？这个命题太高，大概有10层楼这么高。我在9岁的时候找到过答案，我想成为爸爸。。。因为那会看的漫画《阿拉蕾》的爸爸IQ博士很厉害。现在想想那会可真是个憨比。当然，现在肯定不是憨比了，我问了天猫精灵、小爱同学还有Siri，他们都说不知道。所以答案没有定数，想不透。<br>
为什么会想这个问题？现实，现实的苦恼，总会让人胡思乱想。现在想想，或其根本还是个己能力的不足。静心务实，诚人实事才能不枉虚度。<br>
年中四五在想太多中，虚度了光阴，罪过罪过。</p>
<h1 id="充实">充实</h1>
<p>今年还是做了很多事情的。对工作，中规中矩，没有越界，但上进心仍待提升。对职业，编码乐趣乐在其中，但深度已对不上年限，仍需努力学习。对技能，下半年重拾了画画，刚刚入门，希望不要三天打鱼两天晒网。对生活，年末搬了新家，和著名电视剧演员王子文(误)同学合租，确认了父子关系，父爱如山，执手相看泪眼，竟无语凝噎(9岁那会的梦想成真了)。对情感，我是一个没的感情程序员，谢谢。</p>
<h1 id="结语">结语</h1>
<p>虚度和充实，它们可能都是一种情愫。今天也许什么事也没做成，但是心情愉悦，快乐。那今天也是充实的。又比如今天安排满满，看似收获十足，但未片刻走心从事，那今天可能过得很快，也已算虚度。今年好像懂了很多道理，但做事却差了几分。<br>
不妄求，则心安，不妄做，则身安。<br>
最后通俗总结: 今年啊，也没挣到啥大钱，上半年磨叽磨叽的整天搁哪想啥也不知道，回去嘛就玩游戏啥的逼逼赖赖的。然后那下半年吧，新项目有很多事做，那不人就老实了，有事干，时间啊过的就快，今年也就完事了。<br>
再见2019。<strong>平安喜乐，顺遂无忧，如愿以偿</strong>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel实现自定义php artisan命令行脚手架]]></title>
        <id>https://www.zhangajian.com/post/laravel-shi-xian-zi-ding-yi-php-artisan-ming-ling-xing-jiao-shou-jia/</id>
        <link href="https://www.zhangajian.com/post/laravel-shi-xian-zi-ding-yi-php-artisan-ming-ling-xing-jiao-shou-jia/">
        </link>
        <updated>2019-12-21T08:42:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用场景">使用场景</h1>
<p>在我们日常基于项目框架化开发中，经常存在需要通过脚手架工具来生成指定的类文件、组件、模板等场景。而在使用Laravel开发中也不例外，Laravel框架自身已经提供了很多如下<strong>artisan make</strong>命令，用来新建Controller、Model、Job、Event等对象文件。</p>
<pre><code>$ php artisan | grep make
 make
  make:auth                                       Scaffold basic login and registration views and routes
  make:channel                                    Create a new channel class
  make:command                                    Create a new Artisan command
  make:controller                                 Create a new controller class
  make:event                                      Create a new event class
  make:exception                                  Create a new custom exception class
  make:factory                                    Create a new model factory
  make:job                                        Create a new job class
  make:listener                                   Create a new event listener class
  make:mail                                       Create a new email class
  make:middleware                                 Create a new middleware class
  make:migration                                  Create a new migration file
  make:model                                      Create a new Eloquent model class
  make:notification                               Create a new notification class
  make:observer                                   Create a new observer class
  make:policy                                     Create a new policy class
  make:provider                                   Create a new service provider class
  make:request                                    Create a new form request class
  make:resource                                   Create a new resource
  make:rule                                       Create a new validation rule
  make:seeder                                     Create a new seeder class
  make:test                                       Create a new test class
</code></pre>
<p>默认的已经足够丰富。</p>
<h1 id="原理分析">原理分析</h1>
<h1 id="实现功能">实现功能</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新MBP到了，记录一下个人的使用环境搭建]]></title>
        <id>https://www.zhangajian.com/post/xin-mbp-dao-liao-ji-lu-yi-xia-ge-ren-de-shi-yong-huan-jing-da-jian/</id>
        <link href="https://www.zhangajian.com/post/xin-mbp-dao-liao-ji-lu-yi-xia-ge-ren-de-shi-yong-huan-jing-da-jian/">
        </link>
        <updated>2019-11-29T05:50:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="吐槽">吐槽</h1>
<p>本来是打算用迁移助手来直接迁移我时光机器备份中的系统（两边系统版本一致），迁移了整整8个多小时，进度还是2%，感觉有问题就取消了。。。然后系统就崩掉了。。崩掉了，开机进不去了。还好mac都自带重装系统的程序，开机时按 command + R 进入（进入后一定要用格式化工具先抹除硬盘中的数据），点击重装系统就行，必须要联网，网速快基本半个小时内搞定。因为我之前那台是15款的MBP，估计还是会有什么系统硬件上不兼容的地方。所以，如果两台电脑年数差太多，还是别用时光机器或网内直接同步比较好，还是手动重装新环境吧。浪费了我一晚上时间（T_T）。。。</p>
<h1 id="配置">配置</h1>
<p>16寸 - 2.4GHz i9 + 32G + 1T SSD + 5300M</p>
<h1 id="mac习惯设置">Mac习惯设置</h1>
<ul>
<li>finder「显示」菜单中将路径和硬盘容量显示出来</li>
<li>程序坞中「打开文稿时首选标签页」设为始终。个人喜欢双击打开文件所在目录时，都在同一个finder窗口中只开启新标签页</li>
<li>键盘 - 快捷键 - 勾选最下方的「使用键盘导航在控制间移动焦点」，这样设置后每次弹框，tab键就可切换选项，回车确认很方便</li>
</ul>
<h1 id="安装的软件">安装的软件</h1>
<ul>
<li>谷歌浏览器（一登账号书签、设置、历史都同步过来了，舒服）</li>
<li>QQ</li>
<li>微信</li>
<li>搜狗输入法（主要可以设置中文下使用英文标点符号的app清单）</li>
<li>网易云音乐</li>
<li>QQ音乐</li>
<li>Gifox（屏幕录制生成GIF）</li>
<li>karabiner-Elements（对外接键盘键位做映射）</li>
<li>有道云词典</li>
<li>WPS</li>
<li>iTerm2（支持很多自定义化的设置，完全免费，代替Mac自带Terminal的不二选择）</li>
<li>Shawshank+（嘘~翻墙）</li>
<li>百度网盘（小姐姐们都在上面）</li>
<li>有道云笔记</li>
<li>Gridea</li>
<li>CotEditor（很好用的一个开源文本工具）</li>
<li>火狐浏览器</li>
<li>Navicat Premium（数据库管理工具）</li>
<li>PHPStorm</li>
<li>WebStorm</li>
<li>PyCharm</li>
<li>GoLand</li>
<li>Visual Studio Code</li>
<li>PostMan</li>
<li>typora</li>
<li>alfred（很好用的效率工具，还支持直接执行脚本）</li>
<li>Dr.Unarchiver（全格式无广告解压工具）</li>
<li>New File Menu（访达右键新建模板文件插件）</li>
<li>liveReload</li>
<li>网易邮箱大师</li>
<li>Beyond Compare</li>
<li>Docker</li>
<li>钉钉</li>
<li>阿里旺旺</li>
<li>V2RayX（嘘~翻墙）</li>
<li>坚果云</li>
<li>iPic</li>
<li>FileZilla</li>
<li>Adobe Photoshop CC 2020</li>
<li>C4D</li>
<li>微信开发者工具</li>
<li>XCode</li>
<li>Medis（redis管理工具）</li>
</ul>
<h1 id="安装的字体">安装的字体</h1>
<ul>
<li>FiraCode（对编程中的常用符号进行优化， Mozilla 主推的字体系列）</li>
</ul>
<h1 id="命令行类工具">命令行类工具</h1>
<ul>
<li>homebrew （必备）</li>
</ul>
<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<ul>
<li>mysql5.7</li>
</ul>
<pre><code>brew install mysql5.7
</code></pre>
<ul>
<li>php7.3
<ul>
<li>swoole扩展</li>
<li>redis扩展</li>
</ul>
</li>
</ul>
<pre><code>brew install php@7.3

pecl install swoole

pecl install redis
</code></pre>
<ul>
<li>composer
<ul>
<li>crm（第三方快速修改、切换 composer 镜像源）</li>
</ul>
</li>
</ul>
<pre><code>brew install composer

#配置镜像源全局生效
composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/

#crm
composer global require slince/composer-registry-manager

#列出可用的所有镜像源，前面带 * 代表当前使用的镜像
composer repo:ls

#使用 aliyun 镜像源
composer repo:use aliyun
</code></pre>
<ul>
<li>redis</li>
</ul>
<pre><code>brew install redis
</code></pre>
<ul>
<li>nginx</li>
</ul>
<pre><code>brew install nginx
</code></pre>
<ul>
<li>valet</li>
</ul>
<pre><code>composer global require laravel/valet

valet install
</code></pre>
<p><a href="https://learnku.com/docs/laravel/6.x/valet/5128">文档链接</a></p>
<ul>
<li>nodejs
<ul>
<li>nrm（npm库源管理器）</li>
</ul>
</li>
</ul>
<pre><code>brew install node

npm i -g nrm
</code></pre>
<ul>
<li>golang</li>
</ul>
<pre><code>brew install go
</code></pre>
<ul>
<li>vim</li>
</ul>
<pre><code>brew install vim
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac设置shell为zsh]]></title>
        <id>https://www.zhangajian.com/post/mac-she-zhi-shell-wei-zsh/</id>
        <link href="https://www.zhangajian.com/post/mac-she-zhi-shell-wei-zsh/">
        </link>
        <updated>2019-11-28T05:47:19.000Z</updated>
        <content type="html"><![CDATA[<p><strong>设置shell为zsh</strong></p>
<pre><code>#查看系统支持的shell
cat  /etc/shells

#如果没有zsh，则用brew安装
brew install zsh

#查看当前使用shell
echo $SHELL

#设置zsh为默认shell
chsh -s /bin/zsh
</code></pre>
<p><strong>更新 zsh 到最新版本</strong></p>
<pre><code># 安装最新 zsh
brew install zsh

# 添加shell配置
sudo vim /etc/shells

# 在文件的末尾添加以下行
/usr/local/bin/zsh

# 更改默认 shell
chsh -s /usr/local/bin/zsh
</code></pre>
<p><strong>安装 oh-my-zsh</strong><br>
如果遇到问题, 可以直接复制下面链接中内容, 本地新建文件粘贴进去执行</p>
<pre><code>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></pre>
<p><strong>oh-my-zsh主题修改</strong></p>
<p>修改 ~/.zshrc 下的 ZSH_THEME 字段, 如ZSH_THEME=&quot;ys&quot;，<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">主题库链接</a></p>
<p><strong>oh-my-zsh插件</strong></p>
<pre><code># zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/plugins/zsh-autosuggestions

# zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting
</code></pre>
<p><strong>兼容~/.bash_profile</strong></p>
<p>zsh安装后,** ~/.bash_profile** 下设置的环境变量和alias会失效, 需要在 <strong>~/.zshrc</strong> 文件里添加 <strong>~/.bash_profile</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过PHPStorm恢复本地文件未add执行reset --hard后的文件]]></title>
        <id>https://www.zhangajian.com/post/tong-guo-phpstorm-hui-fu-ben-di-wen-jian-wei-add-zhi-xing-reset-hard-hou-de-wen-jian/</id>
        <link href="https://www.zhangajian.com/post/tong-guo-phpstorm-hui-fu-ben-di-wen-jian-wei-add-zhi-xing-reset-hard-hou-de-wen-jian/">
        </link>
        <updated>2019-11-14T15:39:17.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h1 id="前提使用的是jb家的ide-phpstorm">！前提使用的是JB家的IDE - PHPStorm</h1>
</blockquote>
<p><strong>git reset --hard</strong>：HEAD引用指向给定提交，索引（暂存区）内容和工作目录内容都会变给定提交时的状态。也就是在给定提交后所修改的内容都会丢失(新文件会被删除，不在工作目录中的文件恢复，未清除回收站的前提)。</p>
<p>所以这是一个比较危险的操作，想象一下，在一个风和日丽的午后，我们辛勤的在代码的海洋中遨游了好几个时辰的结果突然这样，被自己的骚操作给弄丢了。换做是谁应该都是心里一万匹草泥马奔腾而过吧。</p>
<p>在PHPStorm中：</p>
<ul>
<li>在需要恢复的文件中点击右键</li>
<li>选择 「本地历史」功能菜单</li>
<li>打开后会显示近段时间的修改记录</li>
<li>点击记录节点查看修改，右键点击节点，选择还原后恢复</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Postman使用json格式测试API]]></title>
        <id>https://www.zhangajian.com/post/postman-shi-yong-json-ge-shi-ce-shi-api/</id>
        <link href="https://www.zhangajian.com/post/postman-shi-yong-json-ge-shi-ce-shi-api/">
        </link>
        <updated>2019-11-12T15:57:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="导入curl">导入cURL</h1>
<ol>
<li>打开浏览器开发工具 Network</li>
<li>右键选择需要请求的URL，Copy -&gt; Copy as cURL</li>
<li>打开Postman，选择左上方 Import -&gt; Paste Raw Text，点击 Import 即可</li>
</ol>
<h1 id="手动填入">手动填入</h1>
<ol>
<li>选择 POST 请求方式</li>
<li>设置 headers 增加 「Content-Type」「application/json」</li>
<li>设置 body 为「raw」</li>
<li>填入 json 数据发送测试</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[合并两个远程仓库的提交]]></title>
        <id>https://www.zhangajian.com/post/he-bing-liang-ge-yuan-cheng-cang-ku-de-ti-jiao/</id>
        <link href="https://www.zhangajian.com/post/he-bing-liang-ge-yuan-cheng-cang-ku-de-ti-jiao/">
        </link>
        <updated>2019-11-12T15:35:26.000Z</updated>
        <content type="html"><![CDATA[<p>比如有两个仓库R1和R2，需要将R1的提交合并到R2，当前本地跟踪仓库为R1。</p>
<ul>
<li>新增远程仓库</li>
</ul>
<pre><code>git remote add R2 [url]
</code></pre>
<ul>
<li>拉取远程仓库分支</li>
</ul>
<pre><code>git fetch --all
</code></pre>
<ul>
<li>本地新建并切换到跟踪R2的分支</li>
</ul>
<pre><code>git checkout -b R2-repo R2/master
</code></pre>
<ul>
<li>合并R1仓库的分支提交</li>
</ul>
<pre><code>git merge R1/master
</code></pre>
<p>如果出现以下错误，按下面命令进行解决</p>
<pre><code>git merge master
报错: fatal: refusing to merge unrelated histories

解决方法: git merge master --allow-unrelated-histories
</code></pre>
<ul>
<li>合并后可能会有冲突，解决冲突后即可</li>
<li>推送分支到R2远程仓库</li>
</ul>
<pre><code>git push R2 R2-repo
</code></pre>
<h5 id="参考文章">参考文章</h5>
<p><a href="https://blog.csdn.net/gouboft/article/details/8450696">合并两个git仓库</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[轮询、长轮询、长连接、Websocket的区别]]></title>
        <id>https://www.zhangajian.com/post/lun-xun-chang-lun-xun-chang-lian-jie-websocket-de-qu-bie/</id>
        <link href="https://www.zhangajian.com/post/lun-xun-chang-lun-xun-chang-lian-jie-websocket-de-qu-bie/">
        </link>
        <updated>2019-11-11T16:20:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="短连接">短连接</h1>
<blockquote>
<p>短连接：HTTP1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。HTTP的生命周期通过Request来界定，也就是说一个Request、一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。</p>
</blockquote>
<ul>
<li><strong>轮询</strong>: 客户端一定频率的不停请求服务端是否有新的消息</li>
<li><strong>长轮询</strong> :客户端发出一次请求后，服务器挂起这个请求，等有新的消息或者超时后返回</li>
</ul>
<p>以上都属于短连接的情况。</p>
<h1 id="长连接">长连接</h1>
<p>客户端发起一次请求，服务器保持住之间用于传输http数据的tcp连接，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接,在这样一个http连接中，可以发送多个Request，接收多个Response。但是Request和Response永远是相对应的，也就是说一个request只能有一个response。并且这个response也是被动的，不能主动发起。</p>
<p>类型：</p>
<ul>
<li>
<p><strong>keep-alive</strong>：<br>
http1.1 出了新头，如果请求头中包含 keep-alive，那么这个 http 请求发送收到返回之后，底层的 tcp 连接不会立马断掉，如果后续有 http 请求还是会利用。但是这个连接保持一来是没有硬性规定时间的，由浏览器和服务端实现来控制。二来这个连接不断是指底层 tcp 连接，不是说一次 http 请求收到返回之后不会断掉，还能再收服务端的返回（如果服务端对这次 http 请求立马返回，那么这次 http 请求就结束了。http 请求和底层 tcp 连接的关系后面再说）。这种不是应用层面的长连接，其实和模拟 WebSocket 没啥关系。</p>
</li>
<li>
<p><strong>comet</strong>：<br>
这种技术是一种 hack 技术，即浏览器发送一个 http 请求，但是服务端不是立马返回，服务端一直不返回直到有浏览器需要的内容了在返回。期间这个 http 请求可以连着维持比较长的时间（在服务端返回之前）。这样模拟一种服务端推送机制。因为浏览器请求的时候等于先把连接建立好，等服务端有消息需要返回时再返回给浏览器。</p>
</li>
</ul>
<h1 id="websocket">Websocket</h1>
<p>Websocket是基于HTTP协议的一个新的协议，是HTTP协议上的一种补充，但是不等于http协议的长连接.<br>
Websocket借用了HTTP的协议来完成一部分握手，解决的http的几项难题:</p>
<ul>
<li>
<p><strong>被动性</strong>：当服务器完成协议升级后（即由 HTTP 升级为 Websocket），服务端就可以主动推送信息给客户端；只需要经过一次HTTP请求，就可以做到源源不断的信息传送。</p>
</li>
<li>
<p><strong>服务器端的资源消耗</strong>：long poll 和 ajax轮询 对服务器资源有很大的消耗：ajax轮询需要服务器有很快的资源处理速度；long poll 采用阻塞模型，需要有很高的并发，占用服务器资源空间。而Websocket建立后，可以直接建立持久连接，有信息的时候由服务端主动进行信息传送。</p>
</li>
<li>
<p><strong>处理速度慢</strong>：HTTP协议是无状态的，每建立一次http协议，就要重新发送鉴别信息告诉服务器你是谁，因此会消耗多余无用的传输和处理的时间；Websocket只需要一次HTTP握手，就可以保持通讯状态，直到关闭请求。解决了反复解析HTTP协议，查看identity info的问题。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新主题SubtleGalaxy上线]]></title>
        <id>https://www.zhangajian.com/post/xin-zhu-ti-subtlegalaxy-shang-xian/</id>
        <link href="https://www.zhangajian.com/post/xin-zhu-ti-subtlegalaxy-shang-xian/">
        </link>
        <updated>2019-11-11T08:37:52.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>基于静态博客生成器<a href="https://gridea.dev/">Gridea</a>的简洁现代风博客网站主题「 Subtle Galaxy 」。原设计自Ghost Subtle主题，在此基础上增加了标签页和归档页，优化文章显示以及响应式。</p>
</blockquote>
<blockquote>
<p>欢迎使用本人另外自制的一个主题 <a href="https://github.com/GalaxySuze/gridea-theme-space">Space</a></p>
</blockquote>
<h3 id="安装方法">安装方法</h3>
<ul>
<li>克隆项目到本地</li>
<li>复制「 subtle-galaxy 」目录到「 Gridea 」主题文件中</li>
<li>重启「 Gridea 」客户端</li>
<li>在主题中选择「 Subtle Galaxy 」主题，点击保存</li>
<li>预览查看效果</li>
</ul>
<h3 id="待更新项">待更新项</h3>
<ul>
<li>友链页面</li>
<li>相册页面</li>
<li>支持评论</li>
<li>图片懒加载</li>
<li>优化文章页面</li>
</ul>
<h3 id="示例截图">示例截图</h3>
<figure data-type="image" tabindex="1"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-1.jpg" alt="subtle-galaxy-1.jpg" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-3.jpg" alt="subtle-galaxy-3.jpg" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-4.jpg" alt="subtle-galaxy-4.jpg" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-2.jpg" alt="subtle-galaxy-2.jpg" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[更新了一波Space主题]]></title>
        <id>https://www.zhangajian.com/post/geng-xin-liao-yi-bo-space-zhu-ti/</id>
        <link href="https://www.zhangajian.com/post/geng-xin-liao-yi-bo-space-zhu-ti/">
        </link>
        <updated>2019-10-31T03:28:03.000Z</updated>
        <content type="html"><![CDATA[<p>趁着这段愉悦♂的摸鱼时光，把之前放了很久的 <strong>Space</strong> 主题更新了一波。</p>
<blockquote>
<p>基于静态博客生成器<a href="https://gridea.dev/">Gridea</a>的卡片式、简洁风博客网站主题<a href="https://github.com/GalaxySuze/gridea-theme-space">「 Space 」</a></p>
</blockquote>
<h3 id="更新内容如下">🎉 更新内容如下</h3>
<ul>
<li>新增友链页面</li>
<li>新增图廊页面（分两种布局）</li>
<li>显示文章目录</li>
<li>优化图片懒加载</li>
<li>首页显示优化</li>
<li>文章页面优化</li>
<li>归档页面优化</li>
<li>响应式显示优化</li>
</ul>
<h3 id="️-友链页面使用方法">✍️ 友链页面使用方法</h3>
<ul>
<li>在Gridea中新建一篇文章，文章标题一定要为 <strong>友链</strong> 或者 <strong>Links</strong></li>
<li>然后文章内容如何设置如图</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-youlian.png" alt="友链设置" loading="lazy"></figure>
<ul>
<li>在文章设置中，将此篇设置为隐藏</li>
<li>新增<strong>友链</strong>菜单，菜单链接选择此篇文章</li>
<li>点击Gridea的预览查看效果吧~</li>
<li>演示效果截图</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-youlian-demo.jpg" alt="友链演示" loading="lazy"></figure>
<h3 id="️-图廊页面使用方法">✍️ 图廊页面使用方法</h3>
<ul>
<li>在Gridea中新建一篇文章，文章标题一定要为 <strong>图廊</strong> 或者 <strong>Gallery</strong></li>
<li>然后文章内容如何设置如图</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang.png" alt="图廊设置" loading="lazy"></figure>
<ul>
<li>在文章设置中，将此篇设置为隐藏</li>
<li>新增<strong>图廊</strong>菜单，菜单链接选择此篇文章</li>
<li>点击Gridea的预览查看效果吧~</li>
<li>其中图廊分两种样式：可在选择Space主题后，在 主题自定义配置 -&gt; 布局 -&gt; 图廊样式中进行选择</li>
</ul>
<h4 id="阴影卡片布局">阴影卡片布局</h4>
<figure data-type="image" tabindex="4"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang-demo1.png" alt="阴影卡片" loading="lazy"></figure>
<h4 id="平面卡片布局">平面卡片布局</h4>
<figure data-type="image" tabindex="5"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang-demo-2.png" alt="平面卡片" loading="lazy"></figure>
<h3 id="end">END</h3>
]]></content>
    </entry>
</feed>