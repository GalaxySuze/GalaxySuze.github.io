<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhangajian.com</id>
    <title>张阿简博客</title>
    <updated>2019-11-11T02:58:02.304Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhangajian.com"/>
    <link rel="self" href="https://zhangajian.com/atom.xml"/>
    <subtitle>Kill Time, Or Kiss Time</subtitle>
    <logo>https://zhangajian.com/images/avatar.png</logo>
    <icon>https://zhangajian.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 张阿简博客</rights>
    <entry>
        <title type="html"><![CDATA[更新了一波Space主题]]></title>
        <id>https://zhangajian.com/post/geng-xin-liao-yi-bo-space-zhu-ti</id>
        <link href="https://zhangajian.com/post/geng-xin-liao-yi-bo-space-zhu-ti">
        </link>
        <updated>2019-10-31T03:28:03.000Z</updated>
        <content type="html"><![CDATA[<p>趁着这段愉悦♂的摸鱼时光，把之前放了很久的 <strong>Space</strong> 主题更新了一波。</p>
<blockquote>
<p>基于静态博客生成器<a href="https://gridea.dev/">Gridea</a>的卡片式、简洁风博客网站主题<a href="https://github.com/GalaxySuze/gridea-theme-space">「 Space 」</a></p>
</blockquote>
<h3 id="更新内容如下">🎉 更新内容如下</h3>
<ul>
<li>新增友链页面</li>
<li>新增图廊页面（分两种布局）</li>
<li>显示文章目录</li>
<li>优化图片懒加载</li>
<li>首页显示优化</li>
<li>文章页面优化</li>
<li>归档页面优化</li>
<li>响应式显示优化</li>
</ul>
<h3 id="️-友链页面使用方法">✍️ 友链页面使用方法</h3>
<ul>
<li>在Gridea中新建一篇文章，文章标题一定要为 <strong>友链</strong> 或者 <strong>Links</strong></li>
<li>然后文章内容如何设置如图</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-youlian.png" alt="友链设置"></figure>
<ul>
<li>在文章设置中，将此篇设置为隐藏</li>
<li>新增<strong>友链</strong>菜单，菜单链接选择此篇文章</li>
<li>点击Gridea的预览查看效果吧~</li>
<li>演示效果截图</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-youlian-demo.jpg" alt="友链演示"></figure>
<h3 id="️-图廊页面使用方法">✍️ 图廊页面使用方法</h3>
<ul>
<li>在Gridea中新建一篇文章，文章标题一定要为 <strong>图廊</strong> 或者 <strong>Gallery</strong></li>
<li>然后文章内容如何设置如图</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang.png" alt="图廊设置"></figure>
<ul>
<li>在文章设置中，将此篇设置为隐藏</li>
<li>新增<strong>图廊</strong>菜单，菜单链接选择此篇文章</li>
<li>点击Gridea的预览查看效果吧~</li>
<li>其中图廊分两种样式：可在选择Space主题后，在 主题自定义配置 -&gt; 布局 -&gt; 图廊样式中进行选择</li>
</ul>
<h4 id="阴影卡片布局">阴影卡片布局</h4>
<figure data-type="image" tabindex="4"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang-demo1.png" alt="阴影卡片"></figure>
<h4 id="平面卡片布局">平面卡片布局</h4>
<figure data-type="image" tabindex="5"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang-demo-2.png" alt="平面卡片"></figure>
<h3 id="end">END</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[硬货 - 如何用风控拯救下架的小红书]]></title>
        <id>https://zhangajian.com/post/ying-huo-ru-he-yong-feng-kong-zheng-jiu-xia-jia-de-xiao-hong-shu</id>
        <link href="https://zhangajian.com/post/ying-huo-ru-he-yong-feng-kong-zheng-jiu-xia-jia-de-xiao-hong-shu">
        </link>
        <updated>2019-08-01T05:32:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>好文分享，转载自 <a href="https://mp.weixin.qq.com/s/LchpngIIBqDwejWbFV3E8A">半仙佛人公众号</a></p>
</blockquote>
<h1 id="01">01</h1>
<p>这两天互联网圈最大的热门事件是，小红书下架了。</p>
<p>7月29日晚间，各大安卓应用市场的小红书APP暂时不提供下载。</p>
<p>作为国民级种草APP，小红书的下架既是意料之外，也是情理之中。</p>
<p>意料之外在于，小红书本身只是一个主打消费的内容社区，本身不具有攻击性。</p>
<p>情理之中在于，小红书是C2C模式，笔记内容可以随意发布，任何人用任何方法都可以发布任何内容。</p>
<p>正常人可以，微商可以，特殊工作者可以，黑产也可以。</p>
<p>对于一切C2C的工具类平台产品，只要能发布内容，其实内容失控的风险都是存在的，不仅是小红书。</p>
<p>之前的即刻，Soul，乃至网易云音乐，都存在内容失控的情况，话题广场，论坛，评论区，用户昵称，甚至私人对话，只要可以录入文字图片和语音的地方，就存在着失控的风险。</p>
<p>毕竟产品是简单的，人性是复杂的。</p>
<p>平台治理和内容安全也归属于大风控的范畴，作为一名风控从业者，在这方面，我有一些实战经验。</p>
<p>这篇文章，我打算从内容风控和平台治理的角度来谈谈行业当前的现状与困境。</p>
<p>内容失控，对于所有电商和社区类产品而言，都是致命的。</p>
<p>尤其在互联网文明越来越重要的今天。</p>
<h1 id="02">02</h1>
<p>小红书作为C2C的工具类平台，用户是可以自己上传图片和笔记的。</p>
<p>同时小红书又是Top的种草平台，用户逛小红书就是买东西的。</p>
<p>自由的规则配合精准的潜在消费者，二者一结合，就成了一块超级美妙的流量蛋糕，肥的流油。</p>
<p>于是各种违禁黑产，色情交易，非法医美，就都来了。</p>
<p>在下架前，小红书通过一些关键词索引，可以获得各种神奇的服务，当然现在已经开始大规模屏蔽。</p>
<p>例如粉毒和非法医美；比基尼和特殊服务；增高减肥和黑五类保健品；银行卡电话卡和黑产资料。</p>
<p>这些笔记的特点都是打着攻略分享的名义，往卖家的私人微信号上导流，然后用话术诱导成交。</p>
<p>这种自发性的C2C传播，也是小红书产品本身的最大特点。</p>
<p>很多不法商家在利用小红书这个平台，大发横财。</p>
<p>小红书作为平台方，有苦难言。</p>
<h1 id="03">03</h1>
<p>我不想去讨论小红书作为平台有没有责任，毕竟内容是用户自发的，这块我不够专业。</p>
<p>我想讨论的是，用什么方法可以有效治理掉这些垃圾内容，小红书的风控和平台治理们也在头疼这件事情。</p>
<p>作为风控同行，我想提一些建议，这些源自我的一些实战经验，希望能对他们以及读者有所帮助。</p>
<p>OK，小红书当前面临的核心问题是，C端用户上传的内容具有很大的不可控性，里面可能夹杂了大量的违法违禁内容，需要有效识别这些人，然后针对性屏蔽和封号，在保证正常用户体验的前提下，降低内容风险。</p>
<p>当然，不管是降低内容风险，还是保证用户体验，其核心目的都是要保证企业的商业利益最大化，这是大前提，风控要为业务服务。</p>
<p>所以一切手段最终都要平衡误杀率和ROI。</p>
<p>那么，我们开始。</p>
<h1 id="04">04</h1>
<p>关于违规内容屏蔽，目前业内主要使用的是外采词库以及内部维护一套动态词库。</p>
<p>所谓外采词库就是有专门的供应商会做涉及敏感领域的词，支持API的形式直接调用，可以嵌入到用户昵称录入，文本上传，用户私信等模块，只要上传文本，都会进行一次词库过滤，把一些违禁的词给抓出来。</p>
<p>优点是快速上线，缺点是词库是暗箱状态（属于供应商），并且业务关键数据容易泄露（API调用的入参容易被供应商拿走商用）。</p>
<p>我知道小红书的供应商是哪家，我也测试过很多家，只能说通用词库是没法依据实际业务场景来做精准打击的，建议小红书自建词库，如果没有现成可配置的词库框架，可以使用脚本的方式来让研发维护一套词库，当然最好还是做成可配置的，毕竟用脚本的话，词多了很容易崩溃，不是长久之计。</p>
<p>有了这一套东西后，需要一套应用策略，包含敏感词收集策略，敏感词应用策略，敏感词处置策略。</p>
<p>所谓敏感词收集策略，要解决的是如何获取到有效的敏感词。</p>
<p>很多人工智能公司吹捧所谓自然语义识别，用机器学习做，在这里是不好用的，我要提醒一下小红书，不要迷信机器学习。</p>
<p>因为汉语是博大精深的，使用谐音字，变体字，火星文，以及中间夹杂各种特殊符号和空格的模式，很容易就能绕过机器。</p>
<p>就微信这个词，可以变种成V信，VX，威，VV，你懂得，威X信等等等等，机器学习做不到这么精准的打击，但人的识别配合SQL以及Python代码，可以实现。</p>
<p>在这里，建议使用实时数据库，配专门的数据分析师来做词语收集。</p>
<p>数据分析师可以通过一些基础的违规信息，来进一步人工延伸出索引规则，例如微 ` 信12345，就可以提取出某些关键字（用微这个字来做索引），某些特殊符号，甚至某些符号+数字的特征来抓。</p>
<p>一个熟练的风控数据分析师，一天抓出上万有效敏感词不是问题。</p>
<p>所谓敏感词应用策略，要解决的问题是这些敏感词用于哪些领域。</p>
<p>当你有了一个敏感词库时，你需要对每一个词进行打标签，例如杀人这个词是A类标签，吃奶这个词是B类标签，不同的业务场景以及电商品类，要使用完全不同的标签。</p>
<p>例如牛奶类的笔记，用吃奶这个词就会误伤很大。</p>
<p>这里需要做的是，给每一个场景的业务都打上标签，然后依据标签来使用敏感词库中的词类目。</p>
<p>例如口红类笔记要用ABC标签的词。</p>
<p>例如旗袍类的笔记要用CDF标签的词等等。</p>
<p>至于如何拆解品类打标和敏感词，这个就不展开了，展开必是长篇大论。</p>
<p>所谓敏感词处置策略，要解决的问题是内容命中了敏感词之后，要如何处置这些内容。</p>
<p>这里其实也牵涉对敏感词的打标，主要是设置敏感词处置权重。</p>
<p>例如黄恐暴类的敏感词，标签对应的处置手段应该是直接屏蔽+封号或者直接禁止发布。</p>
<p>例如疑似推广微信号的标签，对应的处置手段应该是屏蔽+禁言，或者禁止发布。</p>
<p>例如命中了一些权重较弱的敏感词或者敏感字，对应的处置手段应该是转人工审核，再发布。</p>
<p>当然这里只是举几个简单的例子，敏感词的应用方法还有很多，不过这个方向是目前比较成熟的模式。</p>
<p>除却敏感词之外，小红书的笔记中还含有大量的图片类内容，这些图片类内容目前主要的问题有2个。</p>
<p>第一个是黄恐暴类图片，图片本身有问题。</p>
<p>第二个是图片本身没问题，但是图片里面的东西有问题，例如图片里面就有VX：12345等字迹或者水印。</p>
<p>对于前者，建议直接购买现成的图片识别服务，阿里腾讯都有成熟的服务。</p>
<p>对于后者，可以使用OCR把图片转成文字，然后使用敏感词策略来进行处理。</p>
<p>以上是对于内容本身的风控思路，需要注意的是，这个需要投入大量的资源，尤其是人工审核资源，今日头条就有数千人专门做内容审核，对于内容电商来说，这个不能省。</p>
<p>而且内容攻防应该是动态的，不存在一劳永逸的事情，需要做好持久战的准备，汉语就是这么博大精深。</p>
<h1 id="05">05</h1>
<p>内容风控很重要，但其实只是表层，而且永远难以做到穷举，真的一刀切下去，会误伤大量的正常用户，这对于用户体验和公司的商业价值而言都是损失。</p>
<p>比内容风控更重要的，是底层风控，从用户注册到发生第一次行为（例如发布笔记或者给某个笔记点赞或者评论或者分享），都需要做更深入的风险管理。</p>
<p>除了要管别人发了什么内容，同样还要管是哪些【人】发了这些内容。</p>
<p>通过敏感词体系，可以对大量的内容笔记来进行标签，分类出正常笔记，可疑笔记，捣乱笔记，沙雕笔记等等等等等，这些统称为Y。</p>
<p>风控策略的基础逻辑是F（x）=Y，X是指特征，F是指算法or策略，Y是指效果。</p>
<p>当你有了Y之后，就等于知道了答案。</p>
<p>然后去找这些异常的笔记，都是谁发布的，这些发布的账号的特征（X）是什么。</p>
<p>一般常见的账号特征有数百个维度，例如注册时间，年龄，性别，发布时间，常用标签，ip地址，设备号（imac，imei，device id），手机号，性别，归属地，APP来源（华为市场，小米市场，APP Store），登录模式（APP，小程序，H5），手机型号，GPS地址，LBS区域，用户注册来源（自来水，A活动推广，市场投放转化，CPA），历史行为（点赞数，关注人），浏览行为，等等等等等，这些信息有的来自于APP埋点，有的来自于依据原有特征推算出的衍生特征。</p>
<p>特征工程是风控的核心之一，重要性不亚于策略应用，好的数据是一切的基础。</p>
<p>通过敏感词找到Y，然后利用Y来反推命中的X，然后得出应用策略-F。</p>
<p>案例1，假如小红书发现某个整容类的异常笔记，大部分发布者和点赞者的IP都是相同的或者都是同一个号段的，那么完全可以设置策略屏蔽这个IP段发这个类型的笔记。</p>
<p>案例2，假如小红书发现某些有问题的笔记，都指向同一个微信号，那么就把发布过这个微信号的账号全都封了，连误杀都没有。</p>
<p>案例3，假如小红书发现某些有问题的笔记，大部分发布者和点赞者都是24小时内注册的，那么完全可以设置注册时间XXX时间内，不允许在XX领域发笔记。</p>
<p>类似的规则，在成熟的平台治理中，会有数十万条，我做过设计和维护。</p>
<p>这一切的规则，都要做成动态可配置的，做成决策引擎的模式，风控只需要拖拉拽这些标签，然后自己写比对符和阈值，再配置处置手段，就可以生效。</p>
<p>例如一条规则，禁止注册时间在24小时内的女性用户发布比基尼笔记。</p>
<p>拆解起来就是。</p>
<p>注册时间&lt;24小时，</p>
<p>且 性别标签=女，</p>
<p>且笔记标签=比基尼</p>
<p>则，禁止发布，</p>
<p>且，弹出文案【半佛仙人你别比比了】。</p>
<p>把这些做成是否的标签，可以自由配置，快速上线。</p>
<h1 id="06">06</h1>
<p>夹杂敏感词策略和决策引擎中间，还应该有一层基于【账户】维度的用户关系网络以及实时监控和干预机制，用图挖掘来做。</p>
<p>所谓关系网络，是指不同账户间的关系，由点和线组成。</p>
<p>例如A账户给B账户的笔记点赞或者评价，就会形成一条关系。</p>
<p>反应在网络中就是A点和B点之间出现了一条关系线（A点赞/评论B）。</p>
<p>再例如A账户和C账户同时给B账户的笔记点赞或者评价，就会形成多条关系线。</p>
<p>反应在网络中就是A点到B点（点赞串联），C点到B点（点赞串联），A点到C点（都给B点过赞）。</p>
<p>关系网络，是对于批量作弊账户的大杀器。</p>
<p>在实际业务中，通过设置点和线的规则，可以有效拦截批量异常行为。</p>
<p>例如在同一个时间，出现了大量有关联的账户（相同IP，相同操作频率，相同GPS等），与某几个笔记或者账户出现了可疑关联（批量点赞），就可以进行拦截。</p>
<p>例如在近10分钟内，整个的流量池出现了波动异常（分均用户点赞数超过了平均值XX倍），则可以触发警报，把溢出流量关联的内容进行屏蔽等等等。</p>
<p>关系网络更多是横向的对比以及大盘的监控，涉及账户管控，不仅要看横向，更要看纵向。</p>
<p>所谓横向，是指同一个时间里，账户A和账户BCDEF是否有相同的行为或者异常的关联，所有人放在一起来比不同。</p>
<p>所谓纵向，是指同一个账户，在不同的时间里，进行了怎样的操作。</p>
<p>例如A账户，过去六个月都是给一些正常的笔记点赞，浏览和评论都很正常，但是近3天，在密集的跟一些异常的笔记产生互动和分享。</p>
<p>这就是账户出现了问题，与之前的操作不同，需要对账户发出警告，要么屏蔽功能，要么要求实名。</p>
<p>横向是用其他用户的特征比对一个用户，纵向是指用户过去的特征比对当前的行为。</p>
<p>纵横之术是对抗黑产养号与批量作弊的屠龙术。</p>
<h1 id="07">07</h1>
<p>敏感词策略和决策引擎外，还需要做的是账户准入和APP加固。</p>
<p>所谓账户准入体系，是指在用户注册阶段就拦截掉大量黑产用户。</p>
<p>大量发布垃圾笔记和违禁笔记的账号，往往都是接码平台批量注册了，不是很多人想到一堆人拿着几百个手机在操作，微商很赚钱的好吗，不会干这种low事。</p>
<p>这就代表着，这些注册手机号本身，就有足够多的问题，因为黑产们拿手机号也有成本，往往会多次利用。</p>
<p>这个手机号在小红书耍流氓之前，可能已经在其他平台被教育过了。</p>
<p>一般在注册阶段，建议对手机号加一层准入规则，常规的手段是禁止小号和虚拟号注册，进一步的手段就是采购阿里云和腾讯天御的注册反欺诈评分，输入一个手机号+注册IP，可以返给一个评分，分数高于XXX分的时候，拒绝用户注册，或者强制要求实名（人脸或者银行卡）。</p>
<p>阿里有最全的电商黑产库，腾讯有最全的社交黑产库，网易有最全的游戏黑产库，都是T+0实时更新的，土豪一些的公司可以都用，其他自便。</p>
<p>反正只要风控能根据异常笔记抓到注册账户手机号就行，拿这些去测各家的数据准确度与误杀率，并不困难。</p>
<p>这个操作在业内叫做加盾，有这一层盾，基本上可以挡掉市场上9成5的黑产，大多数黑产是没有能力绕盾的，因为资金不够雄厚，手机卡更新速度上不去。</p>
<p>账户准入体系外，还需要的就是APP加固。</p>
<p>所谓APP加固，是指对于APP本身的代码，接口做封装和动态加密，拦截接口直接写入内容，代码破解，沙盒，GPS更改等一系列攻击行为，简单理解为是反外挂也可以。</p>
<p>很多APP对于用户的录入内容其实都是有限制的，很多APP甚至不允许用户录入内容，只能选择几个特定的标签。</p>
<p>但是黑产在进行违规内容渗透的时候，往往不是手动填写的，而是直接反编译本地APP代码，拦截接口的动态信息，然后调用接口录入。</p>
<p>例如正常人肯定打不出一些特殊符号，但是通过接口用机器写入，想写什么，就写什么。</p>
<p>小红书社区中的大量明晃晃的违规内容，很有可能是由于接口被攻破，遭遇大量的机器写入，这个在黑产攻防中很常见。</p>
<p>通过机器大量灌入垃圾内容导致竞争对手出现问题，在业内并不稀奇。</p>
<p>所以在账号准入外，也要主要APP本身的加固措施。</p>
<h1 id="08">08</h1>
<p>敏感词过滤，决策引擎，加盾，APP加固，这4套都做好（需要坐很久很久，这是一个很大的工程），是不是就高枕无忧了？</p>
<p>不是的，作为内容社区，小红书还需要更重要的一套机制，就是用户内容举报机制。</p>
<p>只靠小红书自己，累死他们也不可能挡掉一切的垃圾内容，而且使用策略也好，规则也好，阈值设置比较宽松的话，总有漏网之鱼。</p>
<p>阈值设置过于严格的话，总会有被误杀的用户，被误杀的用户还会去各个论坛和网络媒体发声，去谴责小红书。</p>
<p>在这个好事不出门，坏事传千里的年代，这种负面信息对于小红书也是一种伤害。</p>
<p>而小红书最大的特点就是用户自发的参与度高，所以一套完善的用户举报机制是非常高效的平台行为。</p>
<p>这套机制不是加一个所谓的按钮点击这么简单，用户看到的可能就是一个举报按钮。</p>
<p>但小红书需要做的是针对整个举报设计完整的SOP（标准作业流程），如何判定举报是否有效，不同举报内容的确认标准以及处罚标准，举报应在什么时间内生效，应该给与举报用户怎样的奖励与支持增加积极性等等等等，这也是一个浩大的工程。</p>
<p>但对于内容社区而言，用户自发举报是非常好用的东西。</p>
<h1 id="09">09</h1>
<p>以上内容只是基础的平台治理体系，具体的落地方案，执行计划，原始变量及阈值切分等等，受限于保密协议和饭碗的原因，我不方便讲更多，但足够给风控同行做参考了。</p>
<p>而且这些基础体系，在实际操作中，还面临着诸多实务性的难题以及场景契合的问题，很多问题都不是简单的风控问题，需要整个公司的战略和定位一起跟上。</p>
<p>例如在做特征工程的时候，很多数据要求实时性，数仓部门如何满足数据完整性？</p>
<p>例如做策略的时候，需要大量的标准数据，数据产品怎么依据业务需求设计表结构以及数据清洗？</p>
<p>例如评估策略效果的时候，风控产品如何设计分流灰度来做冠军挑战者（ABtest）实现效益最大化？</p>
<p>这样的问题还有很多，其中很多都是牵一发而动全身，公司的资源是有限的，公司里也不是只有风控，大家要靠着业务和营销吃饭的。</p>
<p>这些问题，需要整个公司从上而下认识到这个风险，整体考量业务和风控的平衡，争取公司利益的最大化。</p>
<p>在这个互联网文明大趋势的浪潮下，内容风控将是很多公司的命门，而诸多先行者早就靠自己的积累吃尽了早期野蛮生长的红利，同时树立起了极强的风控壁垒。</p>
<p>这些壁垒需要大量的时间和资源投入，不是一朝一夕就有的，全部都是非卖品。</p>
<p>这对于后来者而言，是非常难的一件事。</p>
<p>但熬过这一劫，就是羽化登仙。</p>
<p>之所以我今天对小红书说了这么多，并不是我喜欢小红书。</p>
<p>而是我觉得，一个活在巨头阴影下的互联网江湖，有点太寂寞了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Supervisor来管理Laravel队列]]></title>
        <id>https://zhangajian.com/post/shi-yong-supervisor-lai-guan-li-laravel-dui-lie</id>
        <link href="https://zhangajian.com/post/shi-yong-supervisor-lai-guan-li-laravel-dui-lie">
        </link>
        <updated>2019-01-06T07:17:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="supervisor是什么">Supervisor是什么</h3>
<p><a href="http://supervisord.org/">Supervisor</a> 是基于 Python 的进程管理工具，可以帮助我们更简单的启动、重启和停止服务器上的后台进程，是 Linux 服务器管理的效率工具。</p>
<p>什么情况下我们需要进程管理呢？就是执行一些需要以守护进程方式启动的程序，比如一个后台任务、一组 Web 服务的进程（说是一组，是因为经常用 Nginx 来做负载均衡），这些很可能是一些网站、REST API 的服务、消息推送的后台服务、日志数据的处理分析服务等等。</p>
<blockquote>
<p>需要注意的是 Supervisor 是通用的进程管理工具，可以用来启动任意进程，不仅仅是用来管理 Python 进程。</p>
</blockquote>
<p>除此之外，Supervisor 还能很友好的管理程序在命令行上输出的日志，可以将日志重定向到自定义的日志文件中，还能按文件大小对日志进行分割。</p>
<p>目前 Supervisor 只能运行在 Unix-Like 的系统上，也就是无法运行在 Windows 上。Supervisor 官方版目前只能运行在 Python 2.4 以上版本，但是还无法运行在 Python 3 上。</p>
<p><strong>Supervisor 有两个主要的组成部分：</strong></p>
<ul>
<li><strong>supervisord</strong>，运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。</li>
<li><strong>supervisorctl</strong>，是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。</li>
</ul>
<h3 id="安装">安装</h3>
<pre><code>pip install supervisor
</code></pre>
<h3 id="创建配置文件命令">创建配置文件命令</h3>
<pre><code>echo_supervisord_conf &gt; /etc/supervisord.conf
</code></pre>
<h3 id="修改默认配置">修改默认配置</h3>
<blockquote>
<p>默认配置文件中的 supervisord.sock、supervisord.log 以及 supervisord.pid 是放在 /tmp 目录下，这个目录存放的是 Linux 中的临时文件，一旦被系统删除，就会提示 unix:///tmp/supervisor.sock no such file，所以我们要把这三个文件放到其他目录中保存。</p>
</blockquote>
<pre><code>[unix_http_server]
;此处修改为/var/run目录，避免被系统删除
file=/var/run/supervisor.sock   ; the path to the socket file

[supervisord]
;此处修改为/var/log/supervisor目录
logfile=/var/log/supervisor/supervisord.log
...
;此处修改为/var/run目录
pidfile=/var/run/supervisord.pid

[supervisorctl]
;此处是关键，否则执行supervisorctl status会报出unix:// not found错误
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

；在最后加上include，新增的配置将在/etc/supervisord.d/conf.d目录下并以.conf结尾
[include]
files = /etc/supervisord.d/conf.d/*.conf
</code></pre>
<h3 id="启动服务">启动服务</h3>
<pre><code>supervisord -c /etc/supervisord.conf
</code></pre>
<h3 id="查看进程">查看进程</h3>
<pre><code>pgrep supervisord | xargs ps -u --pid
</code></pre>
<h3 id="进程的配置">进程的配置</h3>
<p>我们在上面默认配置文件中加入了 [include]，所以我们在 /etc/supervisord.d/conf.d 下新建一个配置文件 queue-worker.conf</p>
<pre><code>[program:queue-worker]  ;项目名称
process_name=%(program_name)s_%(process_num)02d
command=php (填入你的artisan路径)/artisan queue:work redis --sleep=3 --tries=3  ;需要启动的命令
autostart=true
autorestart=true
user=root ;此处填入你运行WEB应用的用户
numprocs=8  ;进程数
redirect_stderr=true  ;把 stderr 重定向到 stdout，默认 false
stdout_logfile=/var/log/supervisor/larashop-queue.log  ;注意分配好日志文件夹权限
</code></pre>
<p>配置完成后我们执行</p>
<pre><code>supervisorctl reread  # 读取有更新（增加）的配置文件，不会启动新添加的程序
supervisorctl update # 重启配置文件修改过的程序
supervisorctl start queue-worker:* # 启动 larashop-worker 程序
</code></pre>
<blockquote>
<p>如果报如下错误，需要在命令行工具增加配置文件指向</p>
</blockquote>
<pre><code>http://localhost:9001 refused connection
</code></pre>
<blockquote>
<p>解决方法</p>
</blockquote>
<pre><code>supervisorctl -c /etc/supervisord/supervisord.conf reread
supervisorctl -c /etc/supervisord/supervisord.conf update
supervisorctl -c /etc/supervisord/supervisord.conf start msp-queue:*
</code></pre>
<p>查看状态</p>
<pre><code>[root@localhost vick]# supervisorctl -c /etc/supervisord/supervisord.conf status
msp-queue:msp-queue_00           RUNNING   pid 19965, uptime 0:00:29
msp-queue:msp-queue_01           RUNNING   pid 19964, uptime 0:00:29
msp-queue:msp-queue_02           RUNNING   pid 19967, uptime 0:00:29
msp-queue:msp-queue_03           RUNNING   pid 19966, uptime 0:00:29
msp-queue:msp-queue_04           RUNNING   pid 19969, uptime 0:00:29
msp-queue:msp-queue_05           RUNNING   pid 19968, uptime 0:00:29
msp-queue:msp-queue_06           RUNNING   pid 19971, uptime 0:00:29
msp-queue:msp-queue_07           RUNNING   pid 19970, uptime 0:00:29
</code></pre>
<p>说明 Laravel 队列已经开始正常运行了<br>
如果在 Laravel 中修改了队列代码，需要重启 Supervisor 才能生效</p>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="https://learnku.com/articles/22321">配置 Supervisor 管理 Laravel 队列</a></li>
<li><a href="https://www.restran.net/2015/10/04/supervisord-tutorial/">Python 进程管理工具 Supervisor 使用教程</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写在2018的尾巴]]></title>
        <id>https://zhangajian.com/post/xie-zai-2018-de-wei-ba</id>
        <link href="https://zhangajian.com/post/xie-zai-2018-de-wei-ba">
        </link>
        <updated>2018-12-31T07:43:15.000Z</updated>
        <summary type="html"><![CDATA[<p>2018，转瞬将过。</p>
<p>宇宙万载，时光荏苒，在看不见的光阴中，人生的刻度又长了一分，想来也该有几分收获。</p>
]]></summary>
        <content type="html"><![CDATA[<p>2018，转瞬将过。</p>
<p>宇宙万载，时光荏苒，在看不见的光阴中，人生的刻度又长了一分，想来也该有几分收获。</p>
<!-- more -->
<p><strong>工作</strong>：入行已是三年有余，高兴的是仍旧一头秀发，沮丧的是衣带渐渐宽阔。但整个一年有惊无险，懊恼、焦虑过，也明朗、开阔过。从小米CRM到上汽ASCM，一点一线的变化不止于0和1之间，更是许多云泥窥缝中产生的思维碰撞。</p>
<p><strong>关键句</strong>：</p>
<ul>
<li>
<p>『你要比业务更懂业务』</p>
</li>
<li>
<p>『好的产品，他首先一定是好用的产品』</p>
</li>
<li>
<p>『你并不需要预测什么会变化，你需要知道的是，变化必然会发生。程序应该保证尽可能合理的灵活性，这样才能在未来不管发生什么变化，都可以应付得了』</p>
</li>
<li>
<p>『PHP是世界上最好的语言』</p>
</li>
<li>
<p>『写JavaScript是真的很蛋疼』</p>
</li>
</ul>
<p><strong>生活</strong>：日子过的依旧，单调孤赏，只是熬夜变成了常态。一个人躺在黑夜里，手机却连接着整个喧哗的世界。只要你不停下来，它永远有新鲜的东西喂养给你，我们被这块小小的电子屏幕驯养成了一只又一只信息饕餮。但庆幸的是，在流连中做过改变，我把小小的电子屏幕换成了27寸的大显示器，咳咳。。。当然，重点的改变是在年中的一个时辰，突然悟了。卸载了微博、抖音、游戏等等纷杂的软件，取关了所有微信信息类的公众号和订阅号，上下班出勤看编程视频，到家看专业书籍，每晚准11点闹钟一响就洗漱睡觉。活生生的坚持了2个月不到的时间，看完了120节的编程视频，读完了3本专业书。尽管后面因为出差和一些事情，慢慢的又回到了原态，但今年在生活希冀上又增厚了一羽。</p>
<p><strong>关键句</strong>：</p>
<ul>
<li>『我从不相信什么懒洋洋的自由，我向往的自由是通过勤奋和努力实现更广阔的人生，那样的自由才是珍贵的、有价值的。我相信一万小时定律，我从来不相信天上掉馅饼的灵感和坐等的成就。做一个自由又自律的人，靠势必实现的决心认真地活着。』</li>
</ul>
<p><strong>2019 Flag</strong>：</p>
<p>接下来又到了大家喜欢的立 flag 的环节，2019 flag 👉 瘦、眠、智、帅、猫、富富富富富富富富富富富富富*1024，希望能完成其中的一项，共勉。</p>
<p><strong>总结</strong>：</p>
<p>2018，不再见。</p>
<p>2019，祝爱我的人和我爱的人，以及可爱的人们，岁月安好。</p>
<p>最后的最后，我的愿望是世界和平。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Linux下搭建我的世界(Minecraft)服务器]]></title>
        <id>https://zhangajian.com/post/zai-linux-xia-da-jian-wo-de-shi-jie-minecraftfu-wu-qi</id>
        <link href="https://zhangajian.com/post/zai-linux-xia-da-jian-wo-de-shi-jie-minecraftfu-wu-qi">
        </link>
        <updated>2018-12-21T07:46:17.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>最近薅了百度云双12的羊毛，1核2G一年150。突然想起以前大学整个宿舍通宵开黑挖泥土的岁月，所以刚好趁着这台服务器，打算自己搭建一个我的世界服务器，重温一下以前的感觉。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>最近薅了百度云双12的羊毛，1核2G一年150。突然想起以前大学整个宿舍通宵开黑挖泥土的岁月，所以刚好趁着这台服务器，打算自己搭建一个我的世界服务器，重温一下以前的感觉。</p>
</blockquote>
<!-- more -->
<h1 id="系统要求">系统要求</h1>
<p>google到的MC系统要求</p>
<ul>
<li>CPU：双核</li>
<li>内存：20-40人<strong>2GB</strong>，30-60人<strong>3GB</strong>，60+人<strong>8GB</strong></li>
</ul>
<p>上面就是服务器端的需求，如果只是和小伙伴们一起玩，也并不需要多优秀的服务器。下面是我的配置</p>
<ul>
<li>CPU：单核</li>
<li>内存：2G</li>
<li>Linux系统：CentOS 7.3 x86_64</li>
</ul>
<h1 id="安装java">安装Java</h1>
<p>MC是用Java写的（当然现在也有别的语言写的版本），由于服务器端的MC是一个jar包，我们在配置之后通过运行jar包来开启服务器端，同时我们在客户端上打开后通过IP地址即可搜索并进入服务器。所以我们首先要先安装Java。通过下面的方法来安装：</p>
<pre><code>yum install -y java-1.8.0-openjdk
</code></pre>
<h1 id="下载mc服务器端">下载MC服务器端</h1>
<p>这里有一个要求，就是你和你的小伙伴要拥有同样版本的MC。不同的版本对应着不同的服务器端，所以我们要下载正确的版本。如何看MC版本呢，一般进入游戏后，游戏左下角会有版本显示。知道了版本号，那么用命令就可以下载对应版本的服务器端了。需要根据版本号补全命令格式：</p>
<pre><code>wget https://s3.amazonaws.com/Minecraft.Download/versions/&lt;你要下载的版本号&gt;/minecraft_server.&lt;你要下载的版本号&gt;.jar

</code></pre>
<p>例子：博主这边选择安装了比较稳定的1.12版本</p>
<pre><code>wget https://s3.amazonaws.com/Minecraft.Download/versions/1.12/minecraft_server.1.12.jar
</code></pre>
<p>等下载提示结束后，minecraft_server.1.12.jar就躺在当前目录了。</p>
<h1 id="mc服务器启动">MC服务器，启动！</h1>
<p>我们就可以使用命令来运行MC服务器：</p>
<pre><code>java -Xms[初始启动分配内存] -Xmx[最大分配内存] -jar [jar包所在路径]/minecraft_server.[版本号].jar nogui
</code></pre>
<p>例子：</p>
<pre><code>java -Xms256m -Xmx512m -jar /home/mc/minecraft_server.1.12.jar nogui
</code></pre>
<blockquote>
<p>关于命令最后一个参数 nogui，是分开的单词 no gui，意思是不需要图形界面，这样会大大减小内存的使用，如果你的Linux是有图形界面的，就可以不打这个 nogui。</p>
</blockquote>
<h1 id="启动成功">启动成功</h1>
<p>上面的命令输入完成后，等待参数由0%一直到100%就启动完成啦！下面给出博主启动完成的后几行显示：</p>
<pre><code>[05:58:08] [Server thread/INFO]: Loaded 488 advancements
[05:58:08] [Server thread/INFO]: Preparing start region for level 0
[05:58:09] [Server thread/INFO]: Preparing spawn area: 0%
[05:58:10] [Server thread/INFO]: Preparing spawn area: 41%
[05:58:11] [Server thread/INFO]: Preparing spawn area: 76%
[05:58:11] [Server thread/INFO]: Done (4.263s)! For help, type &quot;help&quot; or &quot;?&quot;
</code></pre>
<h1 id="mcshell脚本启动">MC，Shell脚本启动！</h1>
<p>我们如果一直使用上面那一句启动的话是不是非常麻烦！每次都要复制粘贴，那么我们可以写一个简单的Shell脚本，放在jar包所在目录，每次启动的时候直接启动脚本就能进入游戏了。</p>
<pre><code>vim start-game.sh
</code></pre>
<p>编辑内容如下：</p>
<pre><code>#!/bin/sh

java -Xms256m -Xmx512m -jar /home/mc/minecraft_server.1.12.jar nogui
</code></pre>
<p>保存退出，每次启动游戏只需要运行下面命令即可:</p>
<pre><code>bash start-game.sh
</code></pre>
<h1 id="mc服务器关闭">MC服务器，关闭！</h1>
<p>按 Ctrl + C 来停止当前服务器</p>
<h1 id="mc服务起最常见的启动失败">MC服务起最常见的启动失败</h1>
<p>我们在第一次运行完jar包后，无论是否运行成功，都能发现当前目录下多出了一堆文件，运行失败的时候其实就是配置除了一点问题。我们在当前目录找一下文件：<strong>eula.txt</strong></p>
<pre><code>vim eula.txt
</code></pre>
<p>按i键进入编辑模式，找到如下一行把 <strong>false</strong> 改为 <strong>true</strong></p>
<pre><code>eula=false
</code></pre>
<p>保存退出</p>
<ul>
<li>按 <strong>esc</strong></li>
<li>输入 <strong>:wq</strong></li>
</ul>
<h1 id="客户端连接mc服务器失败">客户端连接MC服务器失败</h1>
<p>上面都启动成功之后，就可以下载对应服务器版本的客户端。下载好后启动，点击多人游戏，添加服务器，服务器地址输入我们云服务器的公网IP，就可连接上去愉快的玩耍了。但是这时候可能会发现就是怎么连接都失败，如果遇到这个情况，我们需要检查下服务器配置文件，先在jar包目录下找到文件server.propertices 并编辑：</p>
<pre><code>vim server.propertices
</code></pre>
<p>找到这一行</p>
<pre><code>online-mode:true
</code></pre>
<p>将true改为false，这是正版验证服务的设置<br>
关于 <strong>server.propertices</strong> 文件，这边就不多做介绍了，可通过下面的链接了解详情</p>
<ul>
<li><a href="http://www.mcbbs.net/thread-569077-1-1.html">服务器配置文件详细设置</a></li>
<li><a href="https://minecraft-zh.gamepedia.com/Server.properties">我的世界WiKi</a></li>
</ul>
<h1 id="保持服务会话">保持服务会话</h1>
<p>因为博主用的是云服务器，需要通过使用ssh工具来连接到服务器启动游戏服务，但是一般服务器和ssh工具都会有连接会话的超时设置，在一段时间没有在服务器上操作后，会自动断开ssh会话，这时这个会话中的任务就会被杀掉，那小伙伴们游戏玩着玩着就<strong>与服务器断开连接</strong>了。<br>
这个时候我们可以使用Linux上这个 <strong>GNU Screen</strong> 工具来解决上述问题</p>
<blockquote>
<p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>
</blockquote>
<h4 id="安装-screen">安装 screen</h4>
<pre><code>yum install -y screen
</code></pre>
<h4 id="语法">语法：</h4>
<p>screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</p>
<p>参数说明</p>
<ul>
<li>-A 　将所有的视窗都调整为目前终端机的大小。</li>
<li>-d &lt;作业名称&gt; 　将指定的screen作业离线。</li>
<li>-h &lt;行数&gt; 　指定视窗的缓冲区行数。</li>
<li>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</li>
<li>-r &lt;作业名称&gt; 　恢复离线的screen作业。</li>
<li>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</li>
<li>-s 　指定建立新视窗时，所要执行的shell。</li>
<li>-S &lt;作业名称&gt; 　指定screen作业的名称。</li>
<li>-v 　显示版本信息。</li>
<li>-x 　恢复之前离线的screen作业。</li>
<li>-ls或--list 　显示目前所有的screen作业。</li>
<li>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</li>
</ul>
<h4 id="常用screen参数">常用screen参数</h4>
<ul>
<li>screen -S yourname -&gt; 新建一个叫yourname的session</li>
<li>screen -ls -&gt; 列出当前所有的session</li>
<li>screen -r yourname -&gt; 回到yourname这个session</li>
<li>screen -d yourname -&gt; 远程detach某个session</li>
<li>screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</li>
</ul>
<h4 id="保持我们的mc服务会话">保持我们的MC服务会话</h4>
<ul>
<li>新建一个screen会话</li>
</ul>
<pre><code>screen -S mcs
</code></pre>
<p>当输入这个命令后，就会进入 <strong>mcs</strong> 会话，在当前会话下，输入上面的启动脚本命令，确认游戏正常启动后，就可以放着不管了，只要不是服务器挂掉了，服务就会一直运行着。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac下破解Beyond Compare]]></title>
        <id>https://zhangajian.com/post/mac-xia-po-jie-beyond-compare</id>
        <link href="https://zhangajian.com/post/mac-xia-po-jie-beyond-compare">
        </link>
        <updated>2018-12-05T07:50:59.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>1 . 去官网下载Beyond Compare并安装</p>
</li>
<li>
<p>2 . 进入Beyond Compare应用程序MacOS目录下(/Applications/Beyond Compare.app/Contents/MacOS)</p>
</li>
<li>
<p>3 . 将主启动程序BCompare重命名为BCompare.real</p>
</li>
<li>
<p>4 . 在同级目录下新建一个脚本文件命名为BCompare</p>
</li>
</ul>
<pre><code>vim BCompare
</code></pre>
<p>写入</p>
<pre><code>#!/bin/bash

rm &quot;/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat&quot;

&quot;`dirname &quot;$0&quot;`&quot;/BCompare.real $@
</code></pre>
<blockquote>
<p>ps: 代码意义，第一行是注明解释器，第二行是删除注册信息，第三行是启动真正的主程序</p>
</blockquote>
<ul>
<li>5 . 给新建的文件BCompare，授权文件执行权限</li>
</ul>
<pre><code>chmod a+x /Applications/Beyond\ Compare.app/Contents/MacOS/BCompare
</code></pre>
<p>这样我们每次打开软件的时候，都会先自动删掉注册信息，也就是永久免费试用了。</p>
<blockquote>
<p><a href="https://m.pythontab.com/article/1356">参考资料 - https://m.pythontab.com/article/1356</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过Certbot安装Let's Encrypt证书实现全站的HTTPS访问]]></title>
        <id>https://zhangajian.com/post/tong-guo-certbot-an-zhuang-lets-encrypt-zheng-shu-shi-xian-quan-zhan-de-https-fang-wen</id>
        <link href="https://zhangajian.com/post/tong-guo-certbot-an-zhuang-lets-encrypt-zheng-shu-shi-xian-quan-zhan-de-https-fang-wen">
        </link>
        <updated>2018-11-17T07:52:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="相关知识">相关知识</h1>
<h3 id="httphttps-是什么">HTTP/HTTPS 是什么?</h3>
<blockquote>
<p>简单来说，HTTP 是一个传输网页内容的协议，比如我们浏览一个网页，网页上的文字、图片、 CSS 、 JS 等文件都是通过 HTTP 协议传输到我们的浏览器，然后被我们看到。因为 HTTP 是明文传输的，通过 HTTP 协议传输的内容很容易被偷看和篡改，为了安全（你肯定不想被人偷看或者篡改网页内容吧，比如网站银行密码什么的。）就为 HTTP 协议再加上了一层 SSL/TLS 安全协议，所以就有了 HTTPS 。</p>
</blockquote>
<h3 id="ssltls-是什么">SSL/TLS 是什么？</h3>
<blockquote>
<p>SSL 是指安全套接字层（Secure Sockets Layer），内心纯洁的同学也可以理解为「带安全套的 HTTP」，因为带了安全套，所以当然会比较安全。TLS 是 传输层安全协议（Transport Layer Security），SSL 和 TLS 是同一个东西的不同阶段，理解为同一个东西也行，都是安全协议就对了。</p>
</blockquote>
<h3 id="为什么要部署-https">为什么要部署 HTTPS？</h3>
<blockquote>
<p>说到底，就是 HTTPS 更安全。甚至为了安全，一个专业可靠的网站， HTTPS 是必须的。 Firefox 和 Chrome 都计划将没有配置 SSL 加密的 HTTP 网站标记为不安全，目前它们也正在联合其他相关的基金会与公司推动整个互联网 HTTPS 化，现在大家访问的一些主要的网站。如 Google 多年前就已经全部启用 HTTPS ，国内的淘宝、搜狗、知乎、百度等等也全面 HTTPS 了。甚至 Google 和百度的搜索结果也正在给予 HTTPS 的网站更高的排名和优先收录权。</p>
</blockquote>
<h3 id="怎么部署-https-呢">怎么部署 HTTPS 呢？</h3>
<blockquote>
<p>你只需要有一张被信任的 CA （ Certificate Authority ）也就是证书授权中心颁发的 SSL 安全证书，并且将它部署到你的网站服务器上。一旦部署成功后，当用户访问你的网站时，浏览器会在显示的网址前加一把小绿锁，表明这个网站是安全的，当然同时你也会看到网址前的前缀变成了 HTTPS ，不再是 HTTP 了。</p>
</blockquote>
<h3 id="怎么获得-ssl-安全证书呢">怎么获得 SSL 安全证书呢？</h3>
<blockquote>
<p>理论上，我们自己也可以签发 SSL 安全证书，但是我们自己签发的安全证书不会被主流的浏览器信任，所以我们需要被信任的证书授权中心（ CA ）签发的安全证书。而一般的 SSL 安全证书签发服务都比较贵，比如 Godaddy 、 GlobalSign 等机构签发的证书一般都需要20美金一年甚至更贵，不过为了加快推广 HTTPS 的普及， EEF 电子前哨基金会、 Mozilla 基金会和美国密歇根大学成立了一个公益组织叫 ISRG （ Internet Security Research Group ），这个组织从 2015 年开始推出了 Let’s Encrypt 免费证书。这个免费证书不仅免费，而且还相当好用，所以我们就可以利用 Let’s Encrypt 提供的免费证书部署 HTTPS 了。</p>
</blockquote>
<h3 id="lets-encrypt-简介">Let’s Encrypt 简介</h3>
<blockquote>
<p>前面已经介绍过， Let’s Encrypt 是 一个叫 ISRG （ Internet Security Research Group ，互联网安全研究小组）的组织推出的免费安全证书计划。参与这个计划的组织和公司可以说是互联网顶顶重要的先驱，除了前文提到的三个牛气哄哄的发起单位外，后来又有思科（全球网络设备制造商执牛耳者）、 Akamai 加入，甚至连 Linux 基金会也加入了合作，这些大牌组织的加入保证了这个项目的可信度和可持续性。</p>
</blockquote>
<h3 id="certbot-简介">Certbot 简介</h3>
<blockquote>
<p>ISRG 的发起者 EFF （电子前哨基金会）为 Let’s Encrypt 项目发布了一个官方的客户端 Certbot ，利用它可以完全自动化的获取、部署和更新安全证书。虽然第三方工具也可以使用，但是官方工具更权威，风险也更小，而且遇到问题也更容易解决，毕竟有官方的支持。</p>
</blockquote>
<h1 id="实际操作">实际操作</h1>
<h3 id="certbot-使用方法">Certbot 使用方法</h3>
<p>Certbot 的官网是<a href="https://certbot.eff.org/">https://certbot.eff.org/</a>, 我们打开这个链接，选择自己使用的 web server 和操作系统。选择完之后，官网就会显示出对应的安装操作步骤。<br>
以目前我所使用的服务器为例，web server 使用Nginx(1.12)，操作系统是CentOS(7.3)。因为 Certbot 打包在EPEL中，所以在安装 Certbot 之前要先安装EPEL</p>
<pre><code>yum -y install epel-release
</code></pre>
<p>然后按着官网给出的步骤提示命令安装 Certbot</p>
<pre><code>yum install python2-certbot-nginx
</code></pre>
<p>安装完毕后，继续输入官网提示命令</p>
<pre><code>certbot --nginx
</code></pre>
<p>运行此命令会自动获取证书，并且 Certbot 会自动编辑Nginx配置文件配置HTTPS服务。</p>
<blockquote>
<p>这边在运行配置命令时遇到一个坑</p>
</blockquote>
<pre><code>ImportError: No module named 'requests.packages.urllib3'
</code></pre>
<p>可以看出是缺少一个模块包，看配置命令在命令台的输出，Certbot 是用 python 来写 Nginx 配置。既然是用的 python，可以通过 <strong>pip list</strong> 命令查看 python 的依赖包列表。但是查看是已经存在的，这个问题很快通过 Certbot 在 github 上的一个 Issues 找到了答案（<a href="https://github.com/certbot/certbot/issues/5104">Issues链接</a>）。目前看是包的版本依赖有问题，执行以下命令进行依赖包的重装</p>
<pre><code>pip uninstall requests
pip uninstall urllib3
yum remove python-urllib3
yum remove python-requests
yum install python-urllib3
yum install python-requests
yum install certbot
</code></pre>
<p>再次执行 <strong>certbot --nginx</strong> 命令成功。命令执行后首先会提示输入一个邮箱地址，主要作用是订阅一些通知，输入后回车。</p>
<pre><code>[root@izuf6fco0zwyipdq9485s2z ~]# certbot --nginx
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator nginx, Installer nginx

▽
Enter email address (used for urgent renewal and security notices) (Enter 'c' to
cancel): demo@mail.com // 演示邮箱
Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</code></pre>
<p>回车后 Certbot 就会自动请求下载 Let's Encrypt 证书，并设置 Nginx 配置文件。期间会有一些同意相关协议和选择哪个网站配置的交互，这个看输出文字就能明白意思。</p>
<pre><code>...
▽
server {
(A)gree/(C)ancel: a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let's Encrypt project and the non-profit
organization that develops Certbot? We'd like to send you email about our work
encrypting the web, EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: y
Starting new HTTPS connection (1): supporters.eff.org

Which names would you like to activate HTTPS for?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: kisstime.top
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to select all options shown (Enter 'c' to cancel): 1
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for kisstime.top
Cleaning up challenges
...
</code></pre>
<blockquote>
<p>但是这边到 Certbot 设置 Nginx 配置文件的时候遇到一个坑，报如下一个错误</p>
</blockquote>
<pre><code>An unexpected error occurred:
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe5 in position 2: ordinal not in range(128)
Please see the logfiles in /var/log/letsencrypt for more details.
</code></pre>
<p>熟悉 python 的同学应该对这个错误比较了解。不过博主 python 还是用的比较少，花了点时间了解了一下。</p>
<blockquote>
<p>在解决错误之前，首先要了解unicode和utf-8的区别。unicode指的是万国码，是一种“字码表”。而utf-8是这种字码表储存的编码方法。unicode不一定要由utf-8这种方式编成bytecode储存，也可以使用utf-16,utf-7等其他方式。目前大多都以utf-8的方式来变成bytecode。其次，Python中字符串类型分为byte string 和 unicode string两种。如果在python文件中指定编码方式为utf-8(#coding=utf-8)，那么所有带中文的字符串都会被认为是utf-8编码的byte string（例如：mystr=&quot;你好&quot;），但是在函数中所产生的字符串则被认为是unicode string。问题就出在这边，unicode string 和 byte string 是不可以混合使用的，一旦混合使用了，就会产生这样的错误。例如：</p>
</blockquote>
<pre><code>self.response.out.write(&quot;你好&quot;+self.request.get(&quot;argu&quot;))
</code></pre>
<blockquote>
<p>其中，&quot;你好&quot;被认为是byte string，而self.request.get(&quot;argu&quot;)的返回值被认为是unicode string。由于预设的解码器是ascii，所以就不能识别中文byte string。然后就报错了。</p>
</blockquote>
<p>那理解了这个错误原因后，我这边首先想到的就是网站的 Nginx 配置文件中是否含有中文。打开一看，确实存在中文注释。将注释去掉，重新执行命令成功不在报错</p>
<p>接着命令交互会提示是否将所有HTTP重定向到HTTPS，我这边选择全部重定向也就是「2」。</p>
<pre><code>Cleaning up challenges
Deploying Certificate to VirtualHost:  //这边会显示你的网站配置文件目录

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2
Redirecting all traffic on port 80 to ssl in //这边会显示你的网站配置文件目录

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled https://kisstime.top

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=kisstime.top
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   .../fullchain.pem
   Your key file has been saved at:
   .../privkey.pem
   Your cert will expire on 2019-02-14. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the &quot;certonly&quot; option. To non-interactively renew *all* of
   your certificates, run &quot;certbot renew&quot;
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre>
<p>OK，当完成上面最后一步后，输入如上信息后就表明 HTTPS 配置成功了！我们可以通过提示中的 <a href="www.ssllabs.com">SSL Server Test</a> 网址来测试网站是否能够 HTTPS 来进行访问</p>
<pre><code>You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=kisstime.top
</code></pre>
<p>事实证明，高兴的太早了。。。通过测试网站和直接访问域名发现网站都是访问不了。思考了一下，确认下服务器的443端口是否开启，我这边用的是阿里云的服务器，登录控制台查看安全组规则，发现确实是443端口没有开启，配置开启后，重新访问成功。</p>
<h1 id="其他">其他</h1>
<h3 id="nginx的设置说明">Nginx的设置说明</h3>
<p>基本上 Certbot 会在对应的 Nginx 配置文件加上下面的参数：</p>
<pre><code>server {
    # ... other configs
    
    # SSL 设置
    listen 443 ssl;

    # set crt and key
    ssl_certificate .../fullchain.pem;
    ssl_certificate_key .../privkey.pem;
    
    # include 基本的 ssl 设置
    include .../options-ssl-nginx.conf;
    
    # Certbot 也会生成一把 Diffie-Hellman 密钥
    ssl_dhparam .../ssl-dhparams.pem;

    # ... other configs
}
</code></pre>
<h3 id="自动更新证书">自动更新证书</h3>
<p>Let’s Encrypt 免费SSL证书用起来非常方便，但每次申请只有三个月有效期，在每次到期之前都需要重新申请，Certbot 已经提供了一键续订的命令</p>
<pre><code>certbot renew
</code></pre>
<p>我们可以通过添加此条命令的cron作业（或systemd计时器）来安排证书的自动续订</p>
<pre><code>SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin

0 0,12 * * * certbot renew --quiet 
</code></pre>
<h3 id="certbot-的-log-路径">Certbot 的 log 路径</h3>
<p>Certbot 的 log 预设路径在 <strong>/var/log/letsencrypt</strong>，有需要可以去确认查看。</p>
<h3 id="相关第三方">相关第三方</h3>
<p><a href="https://github.com/certbot/certbot/blob/master/certbot-auto">certbot-auto</a>是对脚本certbot的封装，可以设置系统环境或自动升级。</p>
<h1 id="参考资料">参考资料</h1>
<p>牛顿曾经说过：如果说我看得比别人更远些，那是因为我站在巨人的肩膀上。（If I have seen further, it is by standing on the shoulders of giants.）感谢。</p>
<ul>
<li><a href="https://certbot.eff.org/">https://certbot.eff.org/</a></li>
<li><a href="https://linuxstory.org/deploy-lets-encrypt-ssl-certificate-with-certbot">https://linuxstory.org/deploy-lets-encrypt-ssl-certificate-with-certbot</a></li>
<li><a href="https://blog.csdn.net/use_my_heart/article/details/51303317">https://blog.csdn.net/use_my_heart/article/details/51303317</a></li>
<li><a href="https://blog.hellojcc.tw/2018/05/02/setup-https-with-letsencrypt-on-nginx/">https://blog.hellojcc.tw/2018/05/02/setup-https-with-letsencrypt-on-nginx/</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac下iTerm2 SSH 免密登陆阿里云]]></title>
        <id>https://zhangajian.com/post/mac-xia-iterm2-ssh-mian-mi-deng-lu-a-li-yun</id>
        <link href="https://zhangajian.com/post/mac-xia-iterm2-ssh-mian-mi-deng-lu-a-li-yun">
        </link>
        <updated>2018-11-09T07:53:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="服务器配置">服务器配置</h1>
<p>1 登录到服务器修改sshd的配置文件</p>
<blockquote>
<p>vim  /etc/ssh/sshd_config</p>
</blockquote>
<p>找到以下内容，去掉前面的注释（#）</p>
<pre><code>RSAAuthentication yes 
PubkeyAuthentication yes 
AuthorizedKeysFile .ssh/authorized_keys
</code></pre>
<p>重启sshd服务</p>
<blockquote>
<p>service sshd restart</p>
</blockquote>
<h1 id="本机配置">本机配置</h1>
<p>1 本机生成公钥和私钥（已生成跳过）</p>
<blockquote>
<p>ssh-keygen -t rsa</p>
</blockquote>
<p>一路回车即可。默认在 ~/.ssh目录生成两个文件</p>
<pre><code>id_rsa ：私钥 
id_rsa.pub ：公钥
</code></pre>
<p>2 将本地公钥导入到服务器认证文件中</p>
<blockquote>
<p>ssh-copy-id -i ~/.ssh/id_rsa.pub root@你的公网IP</p>
</blockquote>
<p>3 修改 mac 下的配置文件 ~/.ssh/config （没有则创建）</p>
<pre><code>Host aliyun  ### 别名
Hostname 192.168.10.10  ###公网 IP
Port 22  ###端口
User root  ###登录账号
IdentityFile ~/.ssh/id_rsa ###本机私钥地址
</code></pre>
<p>4 使用ssh连接</p>
<blockquote>
<p>ssh aliyun</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在阿里云上部署WordPress]]></title>
        <id>https://zhangajian.com/post/zai-a-li-yun-shang-bu-shu-wordpress</id>
        <link href="https://zhangajian.com/post/zai-a-li-yun-shang-bu-shu-wordpress">
        </link>
        <updated>2018-10-18T07:54:22.000Z</updated>
        <summary type="html"><![CDATA[<p>最近刚好因为活动买了一台新的服务器，空着也空着，刚好可以用来搭博客使用，搭建博客这件事。之前也做过很多次，不管是用静态博客生成器，还是手写一个博客项目。都尝试过，思来想去，这次打算用用WordPress，听闻许久，也该用用看了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近刚好因为活动买了一台新的服务器，空着也空着，刚好可以用来搭博客使用，搭建博客这件事。之前也做过很多次，不管是用静态博客生成器，还是手写一个博客项目。都尝试过，思来想去，这次打算用用WordPress，听闻许久，也该用用看了。</p>
<!-- more -->
<h1 id="安装nginx">安装Nginx</h1>
<pre><code>yum -y install nginx
</code></pre>
<h1 id="安装mysql57">安装Mysql5.7</h1>
<ul>
<li>安装 mysql 官方 yum 源</li>
</ul>
<pre><code>rpm -ivh https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm
</code></pre>
<ul>
<li>查看 MySQL yum 源</li>
</ul>
<pre><code>yum list | grep mysql
</code></pre>
<p>发现只有 mysql80 的包，这是因为没有开启 mysql57 的包，关闭80包，开启57包。</p>
<pre><code>yum-config-manager --disable mysql80-community
yum-config-manager --enable mysql57-community
</code></pre>
<p>报错</p>
<pre><code>-bash: yum-config-manager: 未找到命令
</code></pre>
<p>这个是因为系统默认没有安装这个命令，这个命令在yum-utils 包里，可以通过命令yum -y install yum-utils 安装就可以了。</p>
<ul>
<li>安装 yum-utils 包</li>
</ul>
<pre><code>yum -y install yum-utils
</code></pre>
<ul>
<li>
<p>再次查看Mysql包列表出现57安装包</p>
</li>
<li>
<p>安装 Mysql57</p>
</li>
</ul>
<pre><code>yum -y install mysql-community-server
</code></pre>
<ul>
<li>启动 Mysql57服务</li>
</ul>
<pre><code class="language-shell">systemctl start mysqld
</code></pre>
<ul>
<li>查看初始密码</li>
</ul>
<pre><code>grep 'temporary password' /var/log/mysqld.log
</code></pre>
<ul>
<li>登录 Mysql，修改密码</li>
</ul>
<pre><code>mysql -uroot -p

set password for root@localhost = password('你的密码');
</code></pre>
<p>如果提示错误，那是因为 mysql57 对密码的复杂度进行了限制，依次执行下列命令，取消复杂度限制，再修改</p>
<pre><code>set global validate_password_policy=0;
set global validate_password_mixed_case_count=0;
set global validate_password_number_count=3;
set global validate_password_special_char_count=0;
set global validate_password_length=3;
</code></pre>
<p>提示错误</p>
<pre><code>[root@izuf6fco0zwyipdq9485s2z ~]# mysql -uroot -p
Enter password:
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)
</code></pre>
<ul>
<li>如下操作修复</li>
</ul>
<pre><code># 先关闭服务
systemctl stop mysqld
# 跳过权限验证
mysqld --user=root --skip-grant-tables &amp;
# 登录
mysql -u root mysql
# 设置密码
UPDATE user SET authentication_string=PASSWORD('new password') where USER='root';
# 刷新设置
FLUSH PRIVILEGES;
</code></pre>
<h1 id="安装-php72">安装 PHP7.2</h1>
<p>php7.2 版本的 yum 源在 webtatic 上，但还有一部分需要依赖 epel-release 。EPEL(Extra Packages for Enterprise Linux )，是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux。</p>
<ul>
<li>安装 epel-release</li>
</ul>
<pre><code>yum -y install epel-release
</code></pre>
<p>安装完成后，在 /etc/yum.repos.d 目录下，就会多一个 epel.repo 的文件，还有一个 testing 的测试文件。当系统通过 yum 进行安装软件时，如果需要 epel 里的扩展包，就会自动下载安装。</p>
<ul>
<li>安装 webtatic yum 源</li>
</ul>
<pre><code>rpm -ivh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
</code></pre>
<p>安装完成后，在 /etc/yum.repos.d 目录下会多出 webtatic.repo 和 webtatic-archive.repo 两个文件，还有一个 testing 的测试文件。</p>
<ul>
<li>查看 php 可以安装的包</li>
</ul>
<pre><code> yum list | grep php72
</code></pre>
<p>上面这些 rpm 包就是 webtatic 的 yum 源里面的包啦。我们要安装的就是 php72 的核心包 mod_php72w 和核心扩展包 php72w-cli 、php72w-fpm、php72w-common、php72w-devel。其它扩展选项包请根据需要安装，例如需要 php72w-gd 后期可单独安装。</p>
<ul>
<li>安装php72</li>
</ul>
<pre><code>yum -y install mod_php72w php72w-cli php72w-fpm php72w-common php72w-devel
</code></pre>
<p>通过这种方式安装的 php72 的 php.ini 文件与我们认识的不太一样，它类似于 nginx.conf 存在一个主配置，通过类型 include 方法，包含指定文件夹下的模块配置文件。</p>
<ul>
<li>启动php-fpm</li>
</ul>
<pre><code>systemctl start php-fpm
</code></pre>
<h1 id="安装-wordpress">安装 WordPress</h1>
<ul>
<li>下载wordpress</li>
</ul>
<pre><code>wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz
</code></pre>
<ul>
<li>解压到/home/目录下</li>
</ul>
<pre><code>tar -zxvf wordpress-4.9.4-zh_CN.tar.gz -C /home/
</code></pre>
<ul>
<li>登陆mysql并添加数据库，命名为wordpress</li>
</ul>
<pre><code>mysql -uroot -p
create database wordpress;
show databases;
</code></pre>
<ul>
<li>备份nginx的配置文件</li>
</ul>
<pre><code>cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak
</code></pre>
<ul>
<li>修改配置文件</li>
</ul>
<pre><code>vim /etc/nginx/conf.d/default.conf
</code></pre>
<p>重启Nginx服务时候报错，查看错误日志</p>
<pre><code>vim /var/log/nginx/error.log
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: still could not bind()
</code></pre>
<p>看错误信息提示80端口已经被占用，无法重启Nginx服务，查看80端口进程是哪一个，并kill掉后，重启服务成功</p>
<pre><code>netstat -ntpl
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      11333/php-fpm: mast
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      10363/nginx: master
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      15636/sshd
tcp6       0      0 :::3306                 :::*                    LISTEN      10604/mysqld
tcp6       0      0 :::80                   :::*                    LISTEN      10363/nginx: master
kill 10363
service nginx restart
</code></pre>
<ul>
<li>访问域名后显示WP的安装，我们点击进行填写mysql的用户名和密码</li>
</ul>
<p>数据用户名和密码填写后报错</p>
<blockquote>
<p>抱歉，我不能写入wp-config.php文件 ......</p>
</blockquote>
<p>查看wordpress文件夹，发现是权限问题</p>
<pre><code>ll /home | grep wordpress
drwxr-xr-x 5 nobody 65534 4096 2月   8 2018 wordpress
</code></pre>
<ul>
<li>查看用户组</li>
</ul>
<pre><code>grep -E '^(user|group)' /etc/php-fpm.d/www.conf
user = apache
group = apache
</code></pre>
<ul>
<li>设置访问权限</li>
</ul>
<pre><code>chown -R apache:apache /home/wordpress
</code></pre>
<h1 id="再次访问成功">再次访问成功！</h1>
<p>参考链接：<br>
<a href="https://laravel-china.org/articles/10803/">https://laravel-china.org/articles/10803/</a><br>
<a href="this-weekend-theres-a-lot-of-pits-on-the-website-for-a-friend-to-do">this-weekend-theres-a-lot-of-pits-on-the-website-for-a-friend-to-do</a><br>
<a href="https://blog.csdn.net/u011475134/article/details/80222098">https://blog.csdn.net/u011475134/article/details/80222098</a><br>
<a href="https://laravel-china.org/articles/17377#296073">https://laravel-china.org/articles/17377#296073</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[伏梦]]></title>
        <id>https://zhangajian.com/post/fu-meng</id>
        <link href="https://zhangajian.com/post/fu-meng">
        </link>
        <updated>2018-09-10T07:55:27.000Z</updated>
        <content type="html"><![CDATA[<p>前阵子感冒了，不算严重。期间去过趟医院打针吃药。</p>
<p>那天是周五，请了一天假，下午回家后吃完药。就觉的特别的困，可能是前几天实在没有睡好，也可能是药效起的作用。这一觉睡了有个9小时。</p>
<p>这之间做了一个梦，算是噩梦。但没有突然的惊醒，浑身冷汗。只感觉睡了好久好久，醒后觉的浑身无力。</p>
<p>但这个梦却莹莹沥沥。它是一个故事，不知道是从前哪里看的小说还是哪部电影中留下的碎念。所以，我决定将它稍加改动记录下来：</p>
<p>一个女孩，外衣深黑色针织衫，里面穿着一件白色衬衫，红色格子百褶裙，柔柔弱弱的印象。在一家咖啡店中，靠窗的位置坐着，像是在完成学业。</p>
<p>突然电话响了，应该是一位好友的来电。女孩说：「不知道哦，挺久没联系了，可能不喜欢我了。打算用这种方式分手吧」。</p>
<p>没一会就挂了电话，女孩看了会窗外。用力的咳嗽了几下，从包里拿出了一瓶感冒药，看来也是重感冒，倒了两颗药出来，胶囊状的，瓶子上像是写着女孩的名字。拿起桌子上的水杯服了下去。</p>
<p>不久，女孩起身准备离开，拿起桌子上的书籍和文件。出了咖啡店。像是去往家的路上，路上的风景似曾相识。有一颗无花果树攀出围墙，果子红红郁郁，似血似肉。</p>
<p>女孩到了住处，习惯性的打开楼道门口的信箱，检查是否有来信。翻开信箱盖子，里面一封白色信封静静的躺在黑色的信盒中。女孩邹了下眉头，像是疑问。拿起信封翻看了一下，两面都是空白一片，没有署名，没有地址，没有邮编，是一封匿名信。</p>
<p>女孩撕开信封，里面只有一张照片。拿起一看，顿时被吓了一跳，照片也被抖到了地上。地面上的照片中是一个人被烧死的照片，只有上半身，却血肉模糊，狰狞发呕。照片随着画面一步一步放大。（我也吓死了😭）</p>
<p>画面一转，女孩在家中打着电话：「不会是恶作剧吧，太变态了。本来最近重感冒难受的要死，还有那么多门毕业考试要准备。烦死了」「有点害怕唉，要不报警吧？但是这些估计最多也就立个案」「哎呀，真的和他挺久没联系了，估计想用这种方式逼我先提出分手，他不理我，我也不理他，哼」「好呀，好呀，现在我就过去，在这今晚我肯定睡不着」。</p>
<p>第二天早上，女孩和好友道了别，应该是回去拿一些重要的东西。再次来到楼道门口，女孩看了下信箱，拍了拍胸口呼了一口气，像是给自己打气。再次打开信箱，这次里面躺着两封信，女孩有些惊讶，拿起信封，一封清晰的印着是什么医师证书的回寄，而另外一封又是和昨天一样，双面空白，又是一封匿名信。</p>
<p>女孩犹豫着要不要打开，「又是昨天那样的恶作剧？」，女孩还是撕开了这封匿名信，这次还是一张照片。一只手正在一个昏暗的房间中，拿着一个锤子敲碎着一具尸体的骨架。这次女孩镇定了很多，「我可是学医的，这吓不到我，死变态」，女孩把照片塞了回去，将信封直接扔进了边上的垃圾桶中。</p>
<p>第三天早上，女孩整装待发，走出楼道，经过信箱时，突然有些犹豫。但还是慢慢的转身走向信箱，翻开信箱盖子，里面又躺着一份双面空白的匿名信。「我靠，有完没完」，女孩取出了这封新的信，快速的撕开了信封。这次信封中是两张照片。第一张，一只手将骨灰塞进一个像香烟头的小模具中，大拇指手指甲上还涂着鲜红的指甲油。女孩皱了下眉头，拿起另外一张。</p>
<p>另一张，则是一个被装满药囊瓶子的特写。</p>
<p>女孩突然懵了一下，好像意识到了什么。快速翻起自己包中的感冒药瓶子，和照片做了下比对。女孩干呕了声，将手中的照片和药瓶子扔在了地上，双手捂住了嘴巴，惊恐的退到了墙上。</p>
]]></content>
    </entry>
</feed>