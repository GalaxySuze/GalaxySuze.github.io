<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhangajian.com</id>
    <title>张阿简博客</title>
    <updated>2019-12-01T16:21:22.162Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhangajian.com"/>
    <link rel="self" href="https://zhangajian.com/atom.xml"/>
    <subtitle>Kill Time, Or Kiss Time</subtitle>
    <logo>https://zhangajian.com/images/avatar.png</logo>
    <icon>https://zhangajian.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 张阿简博客</rights>
    <entry>
        <title type="html"><![CDATA[新MBP到了，记录一下个人的使用环境搭建]]></title>
        <id>https://zhangajian.com/post/xin-mbp-dao-liao-ji-lu-yi-xia-ge-ren-de-shi-yong-huan-jing-da-jian</id>
        <link href="https://zhangajian.com/post/xin-mbp-dao-liao-ji-lu-yi-xia-ge-ren-de-shi-yong-huan-jing-da-jian">
        </link>
        <updated>2019-11-29T05:50:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="吐槽">吐槽</h1>
<p>本来是打算用迁移助手来直接迁移我时光机器备份中的系统（两边系统版本一致），迁移了整整8个多小时，进度还是2%，感觉有问题就取消了。。。然后系统就崩掉了。。崩掉了，开机进不去了。还好mac都自带重装系统的程序，开机时按 command + R 进入（进入后一定要用格式化工具先抹除硬盘中的数据），点击重装系统就行，必须要联网，网速快基本半个小时内搞定。因为我之前那台是15款的MBP，估计还是会有什么系统硬件上不兼容的地方。所以，如果两台电脑年数差太多，还是别用时光机器或网内直接同步比较好，还是手动重装新环境吧。浪费了我一晚上时间（T_T）。。。</p>
<h1 id="配置">配置</h1>
<p>16寸 - 2.4GHz i9 + 32G + 1T SSD + 5300M</p>
<h1 id="mac习惯设置">Mac习惯设置</h1>
<ul>
<li>finder「显示」菜单中将路径和硬盘容量显示出来</li>
<li>程序坞中「打开文稿时首选标签页」设为始终。个人喜欢双击打开文件所在目录时，都在同一个finder窗口中只开启新标签页</li>
<li>键盘 - 快捷键 - 勾选最下方的「使用键盘导航在控制间移动焦点」，这样设置后每次弹框，tab键就可切换选项，回车确认很方便</li>
</ul>
<h1 id="安装的软件">安装的软件</h1>
<ul>
<li>谷歌浏览器（一登账号书签、设置、历史都同步过来了，舒服）</li>
<li>QQ</li>
<li>微信</li>
<li>搜狗输入法（主要可以设置中文下使用英文标点符号的app清单）</li>
<li>网易云音乐</li>
<li>QQ音乐</li>
<li>Gifox（屏幕录制生成GIF）</li>
<li>karabiner-Elements（对外接键盘键位做映射）</li>
<li>有道云词典</li>
<li>WPS</li>
<li>iTerm2（支持很多自定义化的设置，完全免费，代替Mac自带Terminal的不二选择）</li>
<li>Shawshank+（嘘~翻墙）</li>
<li>百度网盘（小姐姐们都在上面）</li>
<li>有道云笔记</li>
<li>Gridea</li>
<li>CotEditor（很好用的一个开源文本工具）</li>
<li>火狐浏览器</li>
<li>Navicat Premium（数据库管理工具）</li>
<li>PHPStorm</li>
<li>WebStorm</li>
<li>PyCharm</li>
<li>GoLand</li>
<li>Visual Studio Code</li>
<li>PostMan</li>
<li>typora</li>
<li>alfred（很好用的效率工具，还支持直接执行脚本）</li>
<li>Dr.Unarchiver（全格式无广告解压工具）</li>
<li>New File Menu（访达右键新建模板文件插件）</li>
<li>liveReload</li>
<li>网易邮箱大师</li>
<li>Beyond Compare</li>
<li>Docker</li>
<li>钉钉</li>
<li>阿里旺旺</li>
<li>V2RayX（嘘~翻墙）</li>
<li>坚果云</li>
<li>iPic</li>
<li>FileZilla</li>
<li>Adobe Photoshop CC 2020</li>
<li>C4D</li>
<li>微信开发者工具</li>
<li>XCode</li>
<li>Medis（redis管理工具）</li>
</ul>
<h1 id="安装的字体">安装的字体</h1>
<ul>
<li>FiraCode（对编程中的常用符号进行优化， Mozilla 主推的字体系列）</li>
</ul>
<h1 id="命令行类工具">命令行类工具</h1>
<ul>
<li>homebrew （必备）</li>
</ul>
<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<ul>
<li>mysql5.7</li>
</ul>
<pre><code>brew install mysql5.7
</code></pre>
<ul>
<li>php7.3
<ul>
<li>swoole扩展</li>
<li>redis扩展</li>
</ul>
</li>
</ul>
<pre><code>brew install php@7.3

pecl install swoole

pecl install redis
</code></pre>
<ul>
<li>composer
<ul>
<li>crm（第三方快速修改、切换 composer 镜像源）</li>
</ul>
</li>
</ul>
<pre><code>brew install composer

#配置镜像源全局生效
composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/

#crm
composer global require slince/composer-registry-manager

#列出可用的所有镜像源，前面带 * 代表当前使用的镜像
composer repo:ls

#使用 aliyun 镜像源
composer repo:use aliyun
</code></pre>
<ul>
<li>redis</li>
</ul>
<pre><code>brew install redis
</code></pre>
<ul>
<li>nginx</li>
</ul>
<pre><code>brew install nginx
</code></pre>
<ul>
<li>valet</li>
</ul>
<pre><code>composer global require laravel/valet

valet install
</code></pre>
<p><a href="https://learnku.com/docs/laravel/6.x/valet/5128">文档链接</a></p>
<ul>
<li>nodejs
<ul>
<li>nrm（npm库源管理器）</li>
</ul>
</li>
</ul>
<pre><code>brew install node

npm i -g nrm
</code></pre>
<ul>
<li>golang</li>
</ul>
<pre><code>brew install go
</code></pre>
<ul>
<li>vim</li>
</ul>
<pre><code>brew install vim
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac设置shell为zsh]]></title>
        <id>https://zhangajian.com/post/mac-she-zhi-shell-wei-zsh</id>
        <link href="https://zhangajian.com/post/mac-she-zhi-shell-wei-zsh">
        </link>
        <updated>2019-11-28T05:47:19.000Z</updated>
        <content type="html"><![CDATA[<p><strong>设置shell为zsh</strong></p>
<pre><code>#查看系统支持的shell
cat  /etc/shells

#如果没有zsh，则用brew安装
brew install zsh

#查看当前使用shell
echo $SHELL

#设置zsh为默认shell
chsh -s /bin/zsh
</code></pre>
<p><strong>更新 zsh 到最新版本</strong></p>
<pre><code># 安装最新 zsh
brew install zsh

# 添加shell配置
sudo vim /etc/shells

# 在文件的末尾添加以下行
/usr/local/bin/zsh

# 更改默认 shell
chsh -s /usr/local/bin/zsh
</code></pre>
<p><strong>安装 oh-my-zsh</strong><br>
如果遇到问题, 可以直接复制下面链接中内容, 本地新建文件粘贴进去执行</p>
<pre><code>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></pre>
<p><strong>oh-my-zsh主题修改</strong></p>
<p>修改 ~/.zshrc 下的 ZSH_THEME 字段, 如ZSH_THEME=&quot;ys&quot;，<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">主题库链接</a></p>
<p><strong>oh-my-zsh插件</strong></p>
<pre><code># zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/plugins/zsh-autosuggestions

# zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting
</code></pre>
<p><strong>兼容~/.bash_profile</strong></p>
<p>zsh安装后,** ~/.bash_profile** 下设置的环境变量和alias会失效, 需要在 <strong>~/.zshrc</strong> 文件里添加 <strong>~/.bash_profile</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过PHPStorm恢复本地文件未add执行reset --hard后的文件]]></title>
        <id>https://zhangajian.com/post/tong-guo-phpstorm-hui-fu-ben-di-wen-jian-wei-add-zhi-xing-reset-hard-hou-de-wen-jian</id>
        <link href="https://zhangajian.com/post/tong-guo-phpstorm-hui-fu-ben-di-wen-jian-wei-add-zhi-xing-reset-hard-hou-de-wen-jian">
        </link>
        <updated>2019-11-14T15:39:17.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h1 id="前提使用的是jb家的ide-phpstorm">！前提使用的是JB家的IDE - PHPStorm</h1>
</blockquote>
<p><strong>git reset --hard</strong>：HEAD引用指向给定提交，索引（暂存区）内容和工作目录内容都会变给定提交时的状态。也就是在给定提交后所修改的内容都会丢失(新文件会被删除，不在工作目录中的文件恢复，未清除回收站的前提)。</p>
<p>所以这是一个比较危险的操作，想象一下，在一个风和日丽的午后，我们辛勤的在代码的海洋中遨游了好几个时辰的结果突然这样，被自己的骚操作给弄丢了。换做是谁应该都是心里一万匹草泥马奔腾而过吧。</p>
<p>在PHPStorm中：</p>
<ul>
<li>在需要恢复的文件中点击右键</li>
<li>选择 「本地历史」功能菜单</li>
<li>打开后会显示近段时间的修改记录</li>
<li>点击记录节点查看修改，右键点击节点，选择还原后恢复</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Postman使用json格式测试API]]></title>
        <id>https://zhangajian.com/post/postman-shi-yong-json-ge-shi-ce-shi-api</id>
        <link href="https://zhangajian.com/post/postman-shi-yong-json-ge-shi-ce-shi-api">
        </link>
        <updated>2019-11-12T15:57:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="导入curl">导入cURL</h1>
<ol>
<li>打开浏览器开发工具 Network</li>
<li>右键选择需要请求的URL，Copy -&gt; Copy as cURL</li>
<li>打开Postman，选择左上方 Import -&gt; Paste Raw Text，点击 Import 即可</li>
</ol>
<h1 id="手动填入">手动填入</h1>
<ol>
<li>选择 POST 请求方式</li>
<li>设置 headers 增加 「Content-Type」「application/json」</li>
<li>设置 body 为「raw」</li>
<li>填入 json 数据发送测试</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[合并两个远程仓库的提交]]></title>
        <id>https://zhangajian.com/post/he-bing-liang-ge-yuan-cheng-cang-ku-de-ti-jiao</id>
        <link href="https://zhangajian.com/post/he-bing-liang-ge-yuan-cheng-cang-ku-de-ti-jiao">
        </link>
        <updated>2019-11-12T15:35:26.000Z</updated>
        <content type="html"><![CDATA[<p>比如有两个仓库R1和R2，需要将R1的提交合并到R2，当前本地跟踪仓库为R1。</p>
<ul>
<li>新增远程仓库</li>
</ul>
<pre><code>git remote add R2 [url]
</code></pre>
<ul>
<li>拉取远程仓库分支</li>
</ul>
<pre><code>git fetch --all
</code></pre>
<ul>
<li>本地新建并切换到跟踪R2的分支</li>
</ul>
<pre><code>git checkout -b R2-repo R2/master
</code></pre>
<ul>
<li>合并R1仓库的分支提交</li>
</ul>
<pre><code>git merge R1/master
</code></pre>
<p>如果出现以下错误，按下面命令进行解决</p>
<pre><code>git merge master
报错: fatal: refusing to merge unrelated histories

解决方法: git merge master --allow-unrelated-histories
</code></pre>
<ul>
<li>合并后可能会有冲突，解决冲突后即可</li>
<li>推送分支到R2远程仓库</li>
</ul>
<pre><code>git push R2 R2-repo
</code></pre>
<h6 id="参考文章">参考文章</h6>
<blockquote>
<p><a href="https://blog.csdn.net/gouboft/article/details/8450696">合并两个git仓库</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[轮询、长轮询、长连接、Websocket的区别]]></title>
        <id>https://zhangajian.com/post/lun-xun-chang-lun-xun-chang-lian-jie-websocket-de-qu-bie</id>
        <link href="https://zhangajian.com/post/lun-xun-chang-lun-xun-chang-lian-jie-websocket-de-qu-bie">
        </link>
        <updated>2019-11-11T16:20:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="短连接">短连接</h1>
<blockquote>
<p>短连接：HTTP1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。HTTP的生命周期通过Request来界定，也就是说一个Request、一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。</p>
</blockquote>
<ul>
<li><strong>轮询</strong>: 客户端一定频率的不停请求服务端是否有新的消息</li>
<li><strong>长轮询</strong> :客户端发出一次请求后，服务器挂起这个请求，等有新的消息或者超时后返回</li>
</ul>
<p>以上都属于短连接的情况。</p>
<h1 id="长连接">长连接</h1>
<p>客户端发起一次请求，服务器保持住之间用于传输http数据的tcp连接，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接,在这样一个http连接中，可以发送多个Request，接收多个Response。但是Request和Response永远是相对应的，也就是说一个request只能有一个response。并且这个response也是被动的，不能主动发起。</p>
<p>类型：</p>
<ul>
<li>
<p><strong>keep-alive</strong>：<br>
http1.1 出了新头，如果请求头中包含 keep-alive，那么这个 http 请求发送收到返回之后，底层的 tcp 连接不会立马断掉，如果后续有 http 请求还是会利用。但是这个连接保持一来是没有硬性规定时间的，由浏览器和服务端实现来控制。二来这个连接不断是指底层 tcp 连接，不是说一次 http 请求收到返回之后不会断掉，还能再收服务端的返回（如果服务端对这次 http 请求立马返回，那么这次 http 请求就结束了。http 请求和底层 tcp 连接的关系后面再说）。这种不是应用层面的长连接，其实和模拟 WebSocket 没啥关系。</p>
</li>
<li>
<p><strong>comet</strong>：<br>
这种技术是一种 hack 技术，即浏览器发送一个 http 请求，但是服务端不是立马返回，服务端一直不返回直到有浏览器需要的内容了在返回。期间这个 http 请求可以连着维持比较长的时间（在服务端返回之前）。这样模拟一种服务端推送机制。因为浏览器请求的时候等于先把连接建立好，等服务端有消息需要返回时再返回给浏览器。</p>
</li>
</ul>
<h1 id="websocket">Websocket</h1>
<p>Websocket是基于HTTP协议的一个新的协议，是HTTP协议上的一种补充，但是不等于http协议的长连接.<br>
Websocket借用了HTTP的协议来完成一部分握手，解决的http的几项难题:</p>
<ul>
<li>
<p><strong>被动性</strong>：当服务器完成协议升级后（即由 HTTP 升级为 Websocket），服务端就可以主动推送信息给客户端；只需要经过一次HTTP请求，就可以做到源源不断的信息传送。</p>
</li>
<li>
<p><strong>服务器端的资源消耗</strong>：long poll 和 ajax轮询 对服务器资源有很大的消耗：ajax轮询需要服务器有很快的资源处理速度；long poll 采用阻塞模型，需要有很高的并发，占用服务器资源空间。而Websocket建立后，可以直接建立持久连接，有信息的时候由服务端主动进行信息传送。</p>
</li>
<li>
<p><strong>处理速度慢</strong>：HTTP协议是无状态的，每建立一次http协议，就要重新发送鉴别信息告诉服务器你是谁，因此会消耗多余无用的传输和处理的时间；Websocket只需要一次HTTP握手，就可以保持通讯状态，直到关闭请求。解决了反复解析HTTP协议，查看identity info的问题。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新主题SubtleGalaxy上线]]></title>
        <id>https://zhangajian.com/post/xin-zhu-ti-subtlegalaxy-shang-xian</id>
        <link href="https://zhangajian.com/post/xin-zhu-ti-subtlegalaxy-shang-xian">
        </link>
        <updated>2019-11-11T08:37:52.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>基于静态博客生成器<a href="https://gridea.dev/">Gridea</a>的简洁现代风博客网站主题「 Subtle Galaxy 」。原设计自Ghost Subtle主题，在此基础上增加了标签页和归档页，优化文章显示以及响应式。</p>
</blockquote>
<blockquote>
<p>欢迎使用本人另外自制的一个主题 <a href="https://github.com/GalaxySuze/gridea-theme-space">Space</a></p>
</blockquote>
<h3 id="安装方法">安装方法</h3>
<ul>
<li>克隆项目到本地</li>
<li>复制「 subtle-galaxy 」目录到「 Gridea 」主题文件中</li>
<li>重启「 Gridea 」客户端</li>
<li>在主题中选择「 Subtle Galaxy 」主题，点击保存</li>
<li>预览查看效果</li>
</ul>
<h3 id="待更新项">待更新项</h3>
<ul>
<li>友链页面</li>
<li>相册页面</li>
<li>支持评论</li>
<li>图片懒加载</li>
<li>优化文章页面</li>
</ul>
<h3 id="示例截图">示例截图</h3>
<figure data-type="image" tabindex="1"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-1.jpg" alt="subtle-galaxy-1.jpg"></figure>
<figure data-type="image" tabindex="2"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-3.jpg" alt="subtle-galaxy-3.jpg"></figure>
<figure data-type="image" tabindex="3"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-4.jpg" alt="subtle-galaxy-4.jpg"></figure>
<figure data-type="image" tabindex="4"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/subtle-galaxy-2.jpg" alt="subtle-galaxy-2.jpg"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[更新了一波Space主题]]></title>
        <id>https://zhangajian.com/post/geng-xin-liao-yi-bo-space-zhu-ti</id>
        <link href="https://zhangajian.com/post/geng-xin-liao-yi-bo-space-zhu-ti">
        </link>
        <updated>2019-10-31T03:28:03.000Z</updated>
        <content type="html"><![CDATA[<p>趁着这段愉悦♂的摸鱼时光，把之前放了很久的 <strong>Space</strong> 主题更新了一波。</p>
<blockquote>
<p>基于静态博客生成器<a href="https://gridea.dev/">Gridea</a>的卡片式、简洁风博客网站主题<a href="https://github.com/GalaxySuze/gridea-theme-space">「 Space 」</a></p>
</blockquote>
<h3 id="更新内容如下">🎉 更新内容如下</h3>
<ul>
<li>新增友链页面</li>
<li>新增图廊页面（分两种布局）</li>
<li>显示文章目录</li>
<li>优化图片懒加载</li>
<li>首页显示优化</li>
<li>文章页面优化</li>
<li>归档页面优化</li>
<li>响应式显示优化</li>
</ul>
<h3 id="️-友链页面使用方法">✍️ 友链页面使用方法</h3>
<ul>
<li>在Gridea中新建一篇文章，文章标题一定要为 <strong>友链</strong> 或者 <strong>Links</strong></li>
<li>然后文章内容如何设置如图</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-youlian.png" alt="友链设置"></figure>
<ul>
<li>在文章设置中，将此篇设置为隐藏</li>
<li>新增<strong>友链</strong>菜单，菜单链接选择此篇文章</li>
<li>点击Gridea的预览查看效果吧~</li>
<li>演示效果截图</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-youlian-demo.jpg" alt="友链演示"></figure>
<h3 id="️-图廊页面使用方法">✍️ 图廊页面使用方法</h3>
<ul>
<li>在Gridea中新建一篇文章，文章标题一定要为 <strong>图廊</strong> 或者 <strong>Gallery</strong></li>
<li>然后文章内容如何设置如图</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang.png" alt="图廊设置"></figure>
<ul>
<li>在文章设置中，将此篇设置为隐藏</li>
<li>新增<strong>图廊</strong>菜单，菜单链接选择此篇文章</li>
<li>点击Gridea的预览查看效果吧~</li>
<li>其中图廊分两种样式：可在选择Space主题后，在 主题自定义配置 -&gt; 布局 -&gt; 图廊样式中进行选择</li>
</ul>
<h4 id="阴影卡片布局">阴影卡片布局</h4>
<figure data-type="image" tabindex="4"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang-demo1.png" alt="阴影卡片"></figure>
<h4 id="平面卡片布局">平面卡片布局</h4>
<figure data-type="image" tabindex="5"><img src="https://blog-img-hosting.oss-cn-shanghai.aliyuncs.com/blog/theme_info/space-tulang-demo-2.png" alt="平面卡片"></figure>
<h3 id="end">END</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[硬货 - 如何用风控拯救下架的小红书]]></title>
        <id>https://zhangajian.com/post/ying-huo-ru-he-yong-feng-kong-zheng-jiu-xia-jia-de-xiao-hong-shu</id>
        <link href="https://zhangajian.com/post/ying-huo-ru-he-yong-feng-kong-zheng-jiu-xia-jia-de-xiao-hong-shu">
        </link>
        <updated>2019-08-01T05:32:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>好文分享，转载自 <a href="https://mp.weixin.qq.com/s/LchpngIIBqDwejWbFV3E8A">半仙佛人公众号</a></p>
</blockquote>
<h1 id="01">01</h1>
<p>这两天互联网圈最大的热门事件是，小红书下架了。</p>
<p>7月29日晚间，各大安卓应用市场的小红书APP暂时不提供下载。</p>
<p>作为国民级种草APP，小红书的下架既是意料之外，也是情理之中。</p>
<p>意料之外在于，小红书本身只是一个主打消费的内容社区，本身不具有攻击性。</p>
<p>情理之中在于，小红书是C2C模式，笔记内容可以随意发布，任何人用任何方法都可以发布任何内容。</p>
<p>正常人可以，微商可以，特殊工作者可以，黑产也可以。</p>
<p>对于一切C2C的工具类平台产品，只要能发布内容，其实内容失控的风险都是存在的，不仅是小红书。</p>
<p>之前的即刻，Soul，乃至网易云音乐，都存在内容失控的情况，话题广场，论坛，评论区，用户昵称，甚至私人对话，只要可以录入文字图片和语音的地方，就存在着失控的风险。</p>
<p>毕竟产品是简单的，人性是复杂的。</p>
<p>平台治理和内容安全也归属于大风控的范畴，作为一名风控从业者，在这方面，我有一些实战经验。</p>
<p>这篇文章，我打算从内容风控和平台治理的角度来谈谈行业当前的现状与困境。</p>
<p>内容失控，对于所有电商和社区类产品而言，都是致命的。</p>
<p>尤其在互联网文明越来越重要的今天。</p>
<h1 id="02">02</h1>
<p>小红书作为C2C的工具类平台，用户是可以自己上传图片和笔记的。</p>
<p>同时小红书又是Top的种草平台，用户逛小红书就是买东西的。</p>
<p>自由的规则配合精准的潜在消费者，二者一结合，就成了一块超级美妙的流量蛋糕，肥的流油。</p>
<p>于是各种违禁黑产，色情交易，非法医美，就都来了。</p>
<p>在下架前，小红书通过一些关键词索引，可以获得各种神奇的服务，当然现在已经开始大规模屏蔽。</p>
<p>例如粉毒和非法医美；比基尼和特殊服务；增高减肥和黑五类保健品；银行卡电话卡和黑产资料。</p>
<p>这些笔记的特点都是打着攻略分享的名义，往卖家的私人微信号上导流，然后用话术诱导成交。</p>
<p>这种自发性的C2C传播，也是小红书产品本身的最大特点。</p>
<p>很多不法商家在利用小红书这个平台，大发横财。</p>
<p>小红书作为平台方，有苦难言。</p>
<h1 id="03">03</h1>
<p>我不想去讨论小红书作为平台有没有责任，毕竟内容是用户自发的，这块我不够专业。</p>
<p>我想讨论的是，用什么方法可以有效治理掉这些垃圾内容，小红书的风控和平台治理们也在头疼这件事情。</p>
<p>作为风控同行，我想提一些建议，这些源自我的一些实战经验，希望能对他们以及读者有所帮助。</p>
<p>OK，小红书当前面临的核心问题是，C端用户上传的内容具有很大的不可控性，里面可能夹杂了大量的违法违禁内容，需要有效识别这些人，然后针对性屏蔽和封号，在保证正常用户体验的前提下，降低内容风险。</p>
<p>当然，不管是降低内容风险，还是保证用户体验，其核心目的都是要保证企业的商业利益最大化，这是大前提，风控要为业务服务。</p>
<p>所以一切手段最终都要平衡误杀率和ROI。</p>
<p>那么，我们开始。</p>
<h1 id="04">04</h1>
<p>关于违规内容屏蔽，目前业内主要使用的是外采词库以及内部维护一套动态词库。</p>
<p>所谓外采词库就是有专门的供应商会做涉及敏感领域的词，支持API的形式直接调用，可以嵌入到用户昵称录入，文本上传，用户私信等模块，只要上传文本，都会进行一次词库过滤，把一些违禁的词给抓出来。</p>
<p>优点是快速上线，缺点是词库是暗箱状态（属于供应商），并且业务关键数据容易泄露（API调用的入参容易被供应商拿走商用）。</p>
<p>我知道小红书的供应商是哪家，我也测试过很多家，只能说通用词库是没法依据实际业务场景来做精准打击的，建议小红书自建词库，如果没有现成可配置的词库框架，可以使用脚本的方式来让研发维护一套词库，当然最好还是做成可配置的，毕竟用脚本的话，词多了很容易崩溃，不是长久之计。</p>
<p>有了这一套东西后，需要一套应用策略，包含敏感词收集策略，敏感词应用策略，敏感词处置策略。</p>
<p>所谓敏感词收集策略，要解决的是如何获取到有效的敏感词。</p>
<p>很多人工智能公司吹捧所谓自然语义识别，用机器学习做，在这里是不好用的，我要提醒一下小红书，不要迷信机器学习。</p>
<p>因为汉语是博大精深的，使用谐音字，变体字，火星文，以及中间夹杂各种特殊符号和空格的模式，很容易就能绕过机器。</p>
<p>就微信这个词，可以变种成V信，VX，威，VV，你懂得，威X信等等等等，机器学习做不到这么精准的打击，但人的识别配合SQL以及Python代码，可以实现。</p>
<p>在这里，建议使用实时数据库，配专门的数据分析师来做词语收集。</p>
<p>数据分析师可以通过一些基础的违规信息，来进一步人工延伸出索引规则，例如微 ` 信12345，就可以提取出某些关键字（用微这个字来做索引），某些特殊符号，甚至某些符号+数字的特征来抓。</p>
<p>一个熟练的风控数据分析师，一天抓出上万有效敏感词不是问题。</p>
<p>所谓敏感词应用策略，要解决的问题是这些敏感词用于哪些领域。</p>
<p>当你有了一个敏感词库时，你需要对每一个词进行打标签，例如杀人这个词是A类标签，吃奶这个词是B类标签，不同的业务场景以及电商品类，要使用完全不同的标签。</p>
<p>例如牛奶类的笔记，用吃奶这个词就会误伤很大。</p>
<p>这里需要做的是，给每一个场景的业务都打上标签，然后依据标签来使用敏感词库中的词类目。</p>
<p>例如口红类笔记要用ABC标签的词。</p>
<p>例如旗袍类的笔记要用CDF标签的词等等。</p>
<p>至于如何拆解品类打标和敏感词，这个就不展开了，展开必是长篇大论。</p>
<p>所谓敏感词处置策略，要解决的问题是内容命中了敏感词之后，要如何处置这些内容。</p>
<p>这里其实也牵涉对敏感词的打标，主要是设置敏感词处置权重。</p>
<p>例如黄恐暴类的敏感词，标签对应的处置手段应该是直接屏蔽+封号或者直接禁止发布。</p>
<p>例如疑似推广微信号的标签，对应的处置手段应该是屏蔽+禁言，或者禁止发布。</p>
<p>例如命中了一些权重较弱的敏感词或者敏感字，对应的处置手段应该是转人工审核，再发布。</p>
<p>当然这里只是举几个简单的例子，敏感词的应用方法还有很多，不过这个方向是目前比较成熟的模式。</p>
<p>除却敏感词之外，小红书的笔记中还含有大量的图片类内容，这些图片类内容目前主要的问题有2个。</p>
<p>第一个是黄恐暴类图片，图片本身有问题。</p>
<p>第二个是图片本身没问题，但是图片里面的东西有问题，例如图片里面就有VX：12345等字迹或者水印。</p>
<p>对于前者，建议直接购买现成的图片识别服务，阿里腾讯都有成熟的服务。</p>
<p>对于后者，可以使用OCR把图片转成文字，然后使用敏感词策略来进行处理。</p>
<p>以上是对于内容本身的风控思路，需要注意的是，这个需要投入大量的资源，尤其是人工审核资源，今日头条就有数千人专门做内容审核，对于内容电商来说，这个不能省。</p>
<p>而且内容攻防应该是动态的，不存在一劳永逸的事情，需要做好持久战的准备，汉语就是这么博大精深。</p>
<h1 id="05">05</h1>
<p>内容风控很重要，但其实只是表层，而且永远难以做到穷举，真的一刀切下去，会误伤大量的正常用户，这对于用户体验和公司的商业价值而言都是损失。</p>
<p>比内容风控更重要的，是底层风控，从用户注册到发生第一次行为（例如发布笔记或者给某个笔记点赞或者评论或者分享），都需要做更深入的风险管理。</p>
<p>除了要管别人发了什么内容，同样还要管是哪些【人】发了这些内容。</p>
<p>通过敏感词体系，可以对大量的内容笔记来进行标签，分类出正常笔记，可疑笔记，捣乱笔记，沙雕笔记等等等等等，这些统称为Y。</p>
<p>风控策略的基础逻辑是F（x）=Y，X是指特征，F是指算法or策略，Y是指效果。</p>
<p>当你有了Y之后，就等于知道了答案。</p>
<p>然后去找这些异常的笔记，都是谁发布的，这些发布的账号的特征（X）是什么。</p>
<p>一般常见的账号特征有数百个维度，例如注册时间，年龄，性别，发布时间，常用标签，ip地址，设备号（imac，imei，device id），手机号，性别，归属地，APP来源（华为市场，小米市场，APP Store），登录模式（APP，小程序，H5），手机型号，GPS地址，LBS区域，用户注册来源（自来水，A活动推广，市场投放转化，CPA），历史行为（点赞数，关注人），浏览行为，等等等等等，这些信息有的来自于APP埋点，有的来自于依据原有特征推算出的衍生特征。</p>
<p>特征工程是风控的核心之一，重要性不亚于策略应用，好的数据是一切的基础。</p>
<p>通过敏感词找到Y，然后利用Y来反推命中的X，然后得出应用策略-F。</p>
<p>案例1，假如小红书发现某个整容类的异常笔记，大部分发布者和点赞者的IP都是相同的或者都是同一个号段的，那么完全可以设置策略屏蔽这个IP段发这个类型的笔记。</p>
<p>案例2，假如小红书发现某些有问题的笔记，都指向同一个微信号，那么就把发布过这个微信号的账号全都封了，连误杀都没有。</p>
<p>案例3，假如小红书发现某些有问题的笔记，大部分发布者和点赞者都是24小时内注册的，那么完全可以设置注册时间XXX时间内，不允许在XX领域发笔记。</p>
<p>类似的规则，在成熟的平台治理中，会有数十万条，我做过设计和维护。</p>
<p>这一切的规则，都要做成动态可配置的，做成决策引擎的模式，风控只需要拖拉拽这些标签，然后自己写比对符和阈值，再配置处置手段，就可以生效。</p>
<p>例如一条规则，禁止注册时间在24小时内的女性用户发布比基尼笔记。</p>
<p>拆解起来就是。</p>
<p>注册时间&lt;24小时，</p>
<p>且 性别标签=女，</p>
<p>且笔记标签=比基尼</p>
<p>则，禁止发布，</p>
<p>且，弹出文案【半佛仙人你别比比了】。</p>
<p>把这些做成是否的标签，可以自由配置，快速上线。</p>
<h1 id="06">06</h1>
<p>夹杂敏感词策略和决策引擎中间，还应该有一层基于【账户】维度的用户关系网络以及实时监控和干预机制，用图挖掘来做。</p>
<p>所谓关系网络，是指不同账户间的关系，由点和线组成。</p>
<p>例如A账户给B账户的笔记点赞或者评价，就会形成一条关系。</p>
<p>反应在网络中就是A点和B点之间出现了一条关系线（A点赞/评论B）。</p>
<p>再例如A账户和C账户同时给B账户的笔记点赞或者评价，就会形成多条关系线。</p>
<p>反应在网络中就是A点到B点（点赞串联），C点到B点（点赞串联），A点到C点（都给B点过赞）。</p>
<p>关系网络，是对于批量作弊账户的大杀器。</p>
<p>在实际业务中，通过设置点和线的规则，可以有效拦截批量异常行为。</p>
<p>例如在同一个时间，出现了大量有关联的账户（相同IP，相同操作频率，相同GPS等），与某几个笔记或者账户出现了可疑关联（批量点赞），就可以进行拦截。</p>
<p>例如在近10分钟内，整个的流量池出现了波动异常（分均用户点赞数超过了平均值XX倍），则可以触发警报，把溢出流量关联的内容进行屏蔽等等等。</p>
<p>关系网络更多是横向的对比以及大盘的监控，涉及账户管控，不仅要看横向，更要看纵向。</p>
<p>所谓横向，是指同一个时间里，账户A和账户BCDEF是否有相同的行为或者异常的关联，所有人放在一起来比不同。</p>
<p>所谓纵向，是指同一个账户，在不同的时间里，进行了怎样的操作。</p>
<p>例如A账户，过去六个月都是给一些正常的笔记点赞，浏览和评论都很正常，但是近3天，在密集的跟一些异常的笔记产生互动和分享。</p>
<p>这就是账户出现了问题，与之前的操作不同，需要对账户发出警告，要么屏蔽功能，要么要求实名。</p>
<p>横向是用其他用户的特征比对一个用户，纵向是指用户过去的特征比对当前的行为。</p>
<p>纵横之术是对抗黑产养号与批量作弊的屠龙术。</p>
<h1 id="07">07</h1>
<p>敏感词策略和决策引擎外，还需要做的是账户准入和APP加固。</p>
<p>所谓账户准入体系，是指在用户注册阶段就拦截掉大量黑产用户。</p>
<p>大量发布垃圾笔记和违禁笔记的账号，往往都是接码平台批量注册了，不是很多人想到一堆人拿着几百个手机在操作，微商很赚钱的好吗，不会干这种low事。</p>
<p>这就代表着，这些注册手机号本身，就有足够多的问题，因为黑产们拿手机号也有成本，往往会多次利用。</p>
<p>这个手机号在小红书耍流氓之前，可能已经在其他平台被教育过了。</p>
<p>一般在注册阶段，建议对手机号加一层准入规则，常规的手段是禁止小号和虚拟号注册，进一步的手段就是采购阿里云和腾讯天御的注册反欺诈评分，输入一个手机号+注册IP，可以返给一个评分，分数高于XXX分的时候，拒绝用户注册，或者强制要求实名（人脸或者银行卡）。</p>
<p>阿里有最全的电商黑产库，腾讯有最全的社交黑产库，网易有最全的游戏黑产库，都是T+0实时更新的，土豪一些的公司可以都用，其他自便。</p>
<p>反正只要风控能根据异常笔记抓到注册账户手机号就行，拿这些去测各家的数据准确度与误杀率，并不困难。</p>
<p>这个操作在业内叫做加盾，有这一层盾，基本上可以挡掉市场上9成5的黑产，大多数黑产是没有能力绕盾的，因为资金不够雄厚，手机卡更新速度上不去。</p>
<p>账户准入体系外，还需要的就是APP加固。</p>
<p>所谓APP加固，是指对于APP本身的代码，接口做封装和动态加密，拦截接口直接写入内容，代码破解，沙盒，GPS更改等一系列攻击行为，简单理解为是反外挂也可以。</p>
<p>很多APP对于用户的录入内容其实都是有限制的，很多APP甚至不允许用户录入内容，只能选择几个特定的标签。</p>
<p>但是黑产在进行违规内容渗透的时候，往往不是手动填写的，而是直接反编译本地APP代码，拦截接口的动态信息，然后调用接口录入。</p>
<p>例如正常人肯定打不出一些特殊符号，但是通过接口用机器写入，想写什么，就写什么。</p>
<p>小红书社区中的大量明晃晃的违规内容，很有可能是由于接口被攻破，遭遇大量的机器写入，这个在黑产攻防中很常见。</p>
<p>通过机器大量灌入垃圾内容导致竞争对手出现问题，在业内并不稀奇。</p>
<p>所以在账号准入外，也要主要APP本身的加固措施。</p>
<h1 id="08">08</h1>
<p>敏感词过滤，决策引擎，加盾，APP加固，这4套都做好（需要坐很久很久，这是一个很大的工程），是不是就高枕无忧了？</p>
<p>不是的，作为内容社区，小红书还需要更重要的一套机制，就是用户内容举报机制。</p>
<p>只靠小红书自己，累死他们也不可能挡掉一切的垃圾内容，而且使用策略也好，规则也好，阈值设置比较宽松的话，总有漏网之鱼。</p>
<p>阈值设置过于严格的话，总会有被误杀的用户，被误杀的用户还会去各个论坛和网络媒体发声，去谴责小红书。</p>
<p>在这个好事不出门，坏事传千里的年代，这种负面信息对于小红书也是一种伤害。</p>
<p>而小红书最大的特点就是用户自发的参与度高，所以一套完善的用户举报机制是非常高效的平台行为。</p>
<p>这套机制不是加一个所谓的按钮点击这么简单，用户看到的可能就是一个举报按钮。</p>
<p>但小红书需要做的是针对整个举报设计完整的SOP（标准作业流程），如何判定举报是否有效，不同举报内容的确认标准以及处罚标准，举报应在什么时间内生效，应该给与举报用户怎样的奖励与支持增加积极性等等等等，这也是一个浩大的工程。</p>
<p>但对于内容社区而言，用户自发举报是非常好用的东西。</p>
<h1 id="09">09</h1>
<p>以上内容只是基础的平台治理体系，具体的落地方案，执行计划，原始变量及阈值切分等等，受限于保密协议和饭碗的原因，我不方便讲更多，但足够给风控同行做参考了。</p>
<p>而且这些基础体系，在实际操作中，还面临着诸多实务性的难题以及场景契合的问题，很多问题都不是简单的风控问题，需要整个公司的战略和定位一起跟上。</p>
<p>例如在做特征工程的时候，很多数据要求实时性，数仓部门如何满足数据完整性？</p>
<p>例如做策略的时候，需要大量的标准数据，数据产品怎么依据业务需求设计表结构以及数据清洗？</p>
<p>例如评估策略效果的时候，风控产品如何设计分流灰度来做冠军挑战者（ABtest）实现效益最大化？</p>
<p>这样的问题还有很多，其中很多都是牵一发而动全身，公司的资源是有限的，公司里也不是只有风控，大家要靠着业务和营销吃饭的。</p>
<p>这些问题，需要整个公司从上而下认识到这个风险，整体考量业务和风控的平衡，争取公司利益的最大化。</p>
<p>在这个互联网文明大趋势的浪潮下，内容风控将是很多公司的命门，而诸多先行者早就靠自己的积累吃尽了早期野蛮生长的红利，同时树立起了极强的风控壁垒。</p>
<p>这些壁垒需要大量的时间和资源投入，不是一朝一夕就有的，全部都是非卖品。</p>
<p>这对于后来者而言，是非常难的一件事。</p>
<p>但熬过这一劫，就是羽化登仙。</p>
<p>之所以我今天对小红书说了这么多，并不是我喜欢小红书。</p>
<p>而是我觉得，一个活在巨头阴影下的互联网江湖，有点太寂寞了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Supervisor来管理Laravel队列]]></title>
        <id>https://zhangajian.com/post/shi-yong-supervisor-lai-guan-li-laravel-dui-lie</id>
        <link href="https://zhangajian.com/post/shi-yong-supervisor-lai-guan-li-laravel-dui-lie">
        </link>
        <updated>2019-01-06T07:17:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="supervisor是什么">Supervisor是什么</h3>
<p><a href="http://supervisord.org/">Supervisor</a> 是基于 Python 的进程管理工具，可以帮助我们更简单的启动、重启和停止服务器上的后台进程，是 Linux 服务器管理的效率工具。</p>
<p>什么情况下我们需要进程管理呢？就是执行一些需要以守护进程方式启动的程序，比如一个后台任务、一组 Web 服务的进程（说是一组，是因为经常用 Nginx 来做负载均衡），这些很可能是一些网站、REST API 的服务、消息推送的后台服务、日志数据的处理分析服务等等。</p>
<blockquote>
<p>需要注意的是 Supervisor 是通用的进程管理工具，可以用来启动任意进程，不仅仅是用来管理 Python 进程。</p>
</blockquote>
<p>除此之外，Supervisor 还能很友好的管理程序在命令行上输出的日志，可以将日志重定向到自定义的日志文件中，还能按文件大小对日志进行分割。</p>
<p>目前 Supervisor 只能运行在 Unix-Like 的系统上，也就是无法运行在 Windows 上。Supervisor 官方版目前只能运行在 Python 2.4 以上版本，但是还无法运行在 Python 3 上。</p>
<p><strong>Supervisor 有两个主要的组成部分：</strong></p>
<ul>
<li><strong>supervisord</strong>，运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。</li>
<li><strong>supervisorctl</strong>，是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。</li>
</ul>
<h3 id="安装">安装</h3>
<pre><code>pip install supervisor
</code></pre>
<h3 id="创建配置文件命令">创建配置文件命令</h3>
<pre><code>echo_supervisord_conf &gt; /etc/supervisord.conf
</code></pre>
<h3 id="修改默认配置">修改默认配置</h3>
<blockquote>
<p>默认配置文件中的 supervisord.sock、supervisord.log 以及 supervisord.pid 是放在 /tmp 目录下，这个目录存放的是 Linux 中的临时文件，一旦被系统删除，就会提示 unix:///tmp/supervisor.sock no such file，所以我们要把这三个文件放到其他目录中保存。</p>
</blockquote>
<pre><code>[unix_http_server]
;此处修改为/var/run目录，避免被系统删除
file=/var/run/supervisor.sock   ; the path to the socket file

[supervisord]
;此处修改为/var/log/supervisor目录
logfile=/var/log/supervisor/supervisord.log
...
;此处修改为/var/run目录
pidfile=/var/run/supervisord.pid

[supervisorctl]
;此处是关键，否则执行supervisorctl status会报出unix:// not found错误
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

；在最后加上include，新增的配置将在/etc/supervisord.d/conf.d目录下并以.conf结尾
[include]
files = /etc/supervisord.d/conf.d/*.conf
</code></pre>
<h3 id="启动服务">启动服务</h3>
<pre><code>supervisord -c /etc/supervisord.conf
</code></pre>
<h3 id="查看进程">查看进程</h3>
<pre><code>pgrep supervisord | xargs ps -u --pid
</code></pre>
<h3 id="进程的配置">进程的配置</h3>
<p>我们在上面默认配置文件中加入了 [include]，所以我们在 /etc/supervisord.d/conf.d 下新建一个配置文件 queue-worker.conf</p>
<pre><code>[program:queue-worker]  ;项目名称
process_name=%(program_name)s_%(process_num)02d
command=php (填入你的artisan路径)/artisan queue:work redis --sleep=3 --tries=3  ;需要启动的命令
autostart=true
autorestart=true
user=root ;此处填入你运行WEB应用的用户
numprocs=8  ;进程数
redirect_stderr=true  ;把 stderr 重定向到 stdout，默认 false
stdout_logfile=/var/log/supervisor/larashop-queue.log  ;注意分配好日志文件夹权限
</code></pre>
<p>配置完成后我们执行</p>
<pre><code>supervisorctl reread  # 读取有更新（增加）的配置文件，不会启动新添加的程序
supervisorctl update # 重启配置文件修改过的程序
supervisorctl start queue-worker:* # 启动 larashop-worker 程序
</code></pre>
<blockquote>
<p>如果报如下错误，需要在命令行工具增加配置文件指向</p>
</blockquote>
<pre><code>http://localhost:9001 refused connection
</code></pre>
<blockquote>
<p>解决方法</p>
</blockquote>
<pre><code>supervisorctl -c /etc/supervisord/supervisord.conf reread
supervisorctl -c /etc/supervisord/supervisord.conf update
supervisorctl -c /etc/supervisord/supervisord.conf start msp-queue:*
</code></pre>
<p>查看状态</p>
<pre><code>[root@localhost vick]# supervisorctl -c /etc/supervisord/supervisord.conf status
msp-queue:msp-queue_00           RUNNING   pid 19965, uptime 0:00:29
msp-queue:msp-queue_01           RUNNING   pid 19964, uptime 0:00:29
msp-queue:msp-queue_02           RUNNING   pid 19967, uptime 0:00:29
msp-queue:msp-queue_03           RUNNING   pid 19966, uptime 0:00:29
msp-queue:msp-queue_04           RUNNING   pid 19969, uptime 0:00:29
msp-queue:msp-queue_05           RUNNING   pid 19968, uptime 0:00:29
msp-queue:msp-queue_06           RUNNING   pid 19971, uptime 0:00:29
msp-queue:msp-queue_07           RUNNING   pid 19970, uptime 0:00:29
</code></pre>
<p>说明 Laravel 队列已经开始正常运行了<br>
如果在 Laravel 中修改了队列代码，需要重启 Supervisor 才能生效</p>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="https://learnku.com/articles/22321">配置 Supervisor 管理 Laravel 队列</a></li>
<li><a href="https://www.restran.net/2015/10/04/supervisord-tutorial/">Python 进程管理工具 Supervisor 使用教程</a></li>
</ul>
]]></content>
    </entry>
</feed>