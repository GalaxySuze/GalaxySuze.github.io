<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhangajian.com</id>
    <title>张阿简博客</title>
    <updated>2019-06-15T07:21:47.917Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhangajian.com"/>
    <link rel="self" href="https://zhangajian.com/atom.xml"/>
    <subtitle>Kill Time, Or Kiss Time</subtitle>
    <logo>https://zhangajian.com/images/avatar.png</logo>
    <icon>https://zhangajian.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 张阿简博客</rights>
    <entry>
        <title type="html"><![CDATA[使用Supervisor来管理Laravel队列]]></title>
        <id>https://zhangajian.com/post/shi-yong-supervisor-lai-guan-li-laravel-dui-lie</id>
        <link href="https://zhangajian.com/post/shi-yong-supervisor-lai-guan-li-laravel-dui-lie">
        </link>
        <updated>2019-02-06T07:17:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="supervisor是什么">Supervisor是什么</h3>
<p><a href="http://supervisord.org/">Supervisor</a> 是基于 Python 的进程管理工具，可以帮助我们更简单的启动、重启和停止服务器上的后台进程，是 Linux 服务器管理的效率工具。</p>
<p>什么情况下我们需要进程管理呢？就是执行一些需要以守护进程方式启动的程序，比如一个后台任务、一组 Web 服务的进程（说是一组，是因为经常用 Nginx 来做负载均衡），这些很可能是一些网站、REST API 的服务、消息推送的后台服务、日志数据的处理分析服务等等。</p>
<blockquote>
<p>需要注意的是 Supervisor 是通用的进程管理工具，可以用来启动任意进程，不仅仅是用来管理 Python 进程。</p>
</blockquote>
<p>除此之外，Supervisor 还能很友好的管理程序在命令行上输出的日志，可以将日志重定向到自定义的日志文件中，还能按文件大小对日志进行分割。</p>
<p>目前 Supervisor 只能运行在 Unix-Like 的系统上，也就是无法运行在 Windows 上。Supervisor 官方版目前只能运行在 Python 2.4 以上版本，但是还无法运行在 Python 3 上。</p>
<p><strong>Supervisor 有两个主要的组成部分：</strong></p>
<ul>
<li><strong>supervisord</strong>，运行 Supervisor 时会启动一个进程 supervisord，它负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，而且可以在所管理的进程出现崩溃时自动重启。</li>
<li><strong>supervisorctl</strong>，是命令行管理工具，可以用来执行 stop、start、restart 等命令，来对这些子进程进行管理。</li>
</ul>
<h3 id="安装">安装</h3>
<pre><code class="language-shell">pip install supervisor
</code></pre>
<h3 id="创建配置文件命令">创建配置文件命令</h3>
<pre><code class="language-shell">echo_supervisord_conf &gt; /etc/supervisord.conf
</code></pre>
<h3 id="修改默认配置">修改默认配置</h3>
<blockquote>
<p>默认配置文件中的 supervisord.sock、supervisord.log 以及 supervisord.pid 是放在 /tmp 目录下，这个目录存放的是 Linux 中的临时文件，一旦被系统删除，就会提示 unix:///tmp/supervisor.sock no such file，所以我们要把这三个文件放到其他目录中保存。</p>
</blockquote>
<pre><code class="language-vim">[unix_http_server]
;此处修改为/var/run目录，避免被系统删除
file=/var/run/supervisor.sock   ; the path to the socket file

[supervisord]
;此处修改为/var/log/supervisor目录
logfile=/var/log/supervisor/supervisord.log
...
;此处修改为/var/run目录
pidfile=/var/run/supervisord.pid

[supervisorctl]
;此处是关键，否则执行supervisorctl status会报出unix:// not found错误
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

；在最后加上include，新增的配置将在/etc/supervisord.d/conf.d目录下并以.conf结尾
[include]
files = /etc/supervisord.d/conf.d/*.conf
</code></pre>
<h3 id="启动服务">启动服务</h3>
<pre><code class="language-shell">supervisord -c /etc/supervisord.conf
</code></pre>
<h3 id="查看进程">查看进程</h3>
<pre><code class="language-shell">pgrep supervisord | xargs ps -u --pid
</code></pre>
<h3 id="进程的配置">进程的配置</h3>
<p>我们在上面默认配置文件中加入了 [include]，所以我们在 /etc/supervisord.d/conf.d 下新建一个配置文件 queue-worker.conf</p>
<pre><code class="language-vim">[program:queue-worker]  ;项目名称
process_name=%(program_name)s_%(process_num)02d
command=php (填入你的artisan路径)/artisan queue:work redis --sleep=3 --tries=3  ;需要启动的命令
autostart=true
autorestart=true
user=root ;此处填入你运行WEB应用的用户
numprocs=8  ;进程数
redirect_stderr=true  ;把 stderr 重定向到 stdout，默认 false
stdout_logfile=/var/log/supervisor/larashop-queue.log  ;注意分配好日志文件夹权限
</code></pre>
<p>配置完成后我们执行</p>
<pre><code class="language-shell">supervisorctl reread  # 读取有更新（增加）的配置文件，不会启动新添加的程序
supervisorctl update # 重启配置文件修改过的程序
supervisorctl start queue-worker:* # 启动 larashop-worker 程序
</code></pre>
<blockquote>
<p>如果报如下错误，需要在命令行工具增加配置文件指向</p>
</blockquote>
<pre><code class="language-shell">http://localhost:9001 refused connection
</code></pre>
<blockquote>
<p>解决方法</p>
</blockquote>
<pre><code class="language-shell">supervisorctl -c /etc/supervisord/supervisord.conf reread
supervisorctl -c /etc/supervisord/supervisord.conf update
supervisorctl -c /etc/supervisord/supervisord.conf start msp-queue:*
</code></pre>
<p>查看状态</p>
<pre><code class="language-shell">[root@localhost vick]# supervisorctl -c /etc/supervisord/supervisord.conf status
msp-queue:msp-queue_00           RUNNING   pid 19965, uptime 0:00:29
msp-queue:msp-queue_01           RUNNING   pid 19964, uptime 0:00:29
msp-queue:msp-queue_02           RUNNING   pid 19967, uptime 0:00:29
msp-queue:msp-queue_03           RUNNING   pid 19966, uptime 0:00:29
msp-queue:msp-queue_04           RUNNING   pid 19969, uptime 0:00:29
msp-queue:msp-queue_05           RUNNING   pid 19968, uptime 0:00:29
msp-queue:msp-queue_06           RUNNING   pid 19971, uptime 0:00:29
msp-queue:msp-queue_07           RUNNING   pid 19970, uptime 0:00:29
</code></pre>
<p>说明 Laravel 队列已经开始正常运行了
如果在 Laravel 中修改了队列代码，需要重启 Supervisor 才能生效</p>
<h3 id="参考链接">参考链接</h3>
<ul>
<li><a href="https://learnku.com/articles/22321">配置 Supervisor 管理 Laravel 队列</a></li>
<li><a href="https://www.restran.net/2015/10/04/supervisord-tutorial/">Python 进程管理工具 Supervisor 使用教程</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写在2018的尾巴]]></title>
        <id>https://zhangajian.com/post/xie-zai-2018-de-wei-ba</id>
        <link href="https://zhangajian.com/post/xie-zai-2018-de-wei-ba">
        </link>
        <updated>2018-12-31T07:43:15.000Z</updated>
        <summary type="html"><![CDATA[<p>2018，转瞬将过。</p>
<p>宇宙万载，时光荏苒，在看不见的光阴中，人生的刻度又长了一分，想来也该有几分收获。</p>
]]></summary>
        <content type="html"><![CDATA[<p>2018，转瞬将过。</p>
<p>宇宙万载，时光荏苒，在看不见的光阴中，人生的刻度又长了一分，想来也该有几分收获。</p>
<!-- more -->
<p><strong>工作</strong>：入行已是三年有余，高兴的是仍旧一头秀发，沮丧的是衣带渐渐宽阔。但整个一年有惊无险，懊恼、焦虑过，也明朗、开阔过。从小米CRM到上汽ASCM，一点一线的变化不止于0和1之间，更是许多云泥窥缝中产生的思维碰撞。</p>
<p><strong>关键句</strong>：</p>
<ul>
<li>
<p>『你要比业务更懂业务』</p>
</li>
<li>
<p>『好的产品，他首先一定是好用的产品』</p>
</li>
<li>
<p>『你并不需要预测什么会变化，你需要知道的是，变化必然会发生。程序应该保证尽可能合理的灵活性，这样才能在未来不管发生什么变化，都可以应付得了』</p>
</li>
<li>
<p>『PHP是世界上最好的语言』</p>
</li>
<li>
<p>『写JavaScript是真的很蛋疼』</p>
</li>
</ul>
<p><strong>生活</strong>：日子过的依旧，单调孤赏，只是熬夜变成了常态。一个人躺在黑夜里，手机却连接着整个喧哗的世界。只要你不停下来，它永远有新鲜的东西喂养给你，我们被这块小小的电子屏幕驯养成了一只又一只信息饕餮。但庆幸的是，在流连中做过改变，我把小小的电子屏幕换成了27寸的大显示器，咳咳。。。当然，重点的改变是在年中的一个时辰，突然悟了。卸载了微博、抖音、游戏等等纷杂的软件，取关了所有微信信息类的公众号和订阅号，上下班出勤看编程视频，到家看专业书籍，每晚准11点闹钟一响就洗漱睡觉。活生生的坚持了2个月不到的时间，看完了120节的编程视频，读完了3本专业书。尽管后面因为出差和一些事情，慢慢的又回到了原态，但今年在生活希冀上又增厚了一羽。</p>
<p><strong>关键句</strong>：</p>
<ul>
<li>『我从不相信什么懒洋洋的自由，我向往的自由是通过勤奋和努力实现更广阔的人生，那样的自由才是珍贵的、有价值的。我相信一万小时定律，我从来不相信天上掉馅饼的灵感和坐等的成就。做一个自由又自律的人，靠势必实现的决心认真地活着。』</li>
</ul>
<p><strong>2019 Flag</strong>：</p>
<p>接下来又到了大家喜欢的立 flag 的环节，2019 flag 👉 瘦、眠、智、帅、猫、富富富富富富富富富富富富富*1024，希望能完成其中的一项，共勉。</p>
<p><strong>总结</strong>：</p>
<p>2018，不再见。</p>
<p>2019，祝爱我的人和我爱的人，以及可爱的人们，岁月安好。</p>
<p>最后的最后，我的愿望是世界和平。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Linux下搭建我的世界(Minecraft)服务器]]></title>
        <id>https://zhangajian.com/post/zai-linux-xia-da-jian-wo-de-shi-jie-minecraftfu-wu-qi</id>
        <link href="https://zhangajian.com/post/zai-linux-xia-da-jian-wo-de-shi-jie-minecraftfu-wu-qi">
        </link>
        <updated>2018-12-21T07:46:17.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>最近薅了百度云双12的羊毛，1核2G一年150。突然想起以前大学整个宿舍通宵开黑挖泥土的岁月，所以刚好趁着这台服务器，打算自己搭建一个我的世界服务器，重温一下以前的感觉。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>最近薅了百度云双12的羊毛，1核2G一年150。突然想起以前大学整个宿舍通宵开黑挖泥土的岁月，所以刚好趁着这台服务器，打算自己搭建一个我的世界服务器，重温一下以前的感觉。</p>
</blockquote>
<!-- more -->
<h1 id="系统要求-">系统要求 - @</h1>
<p>google到的MC系统要求:</p>
<ul>
<li>CPU：双核</li>
<li>内存：20-40人<strong>2GB</strong>，30-60人<strong>3GB</strong>，60+人<strong>8GB</strong></li>
</ul>
<p>上面就是服务器端的需求，如果只是和小伙伴们一起玩，也并不需要多优秀的服务器。下面是我的配置：</p>
<ul>
<li>CPU：单核</li>
<li>内存：2G</li>
<li>Linux系统：CentOS 7.3 x86_64</li>
</ul>
<h1 id="安装java">安装Java</h1>
<p>MC是用Java写的（当然现在也有别的语言写的版本），由于服务器端的MC是一个jar包，我们在配置之后通过运行jar包来开启服务器端，同时我们在客户端上打开后通过IP地址即可搜索并进入服务器。所以我们首先要先安装Java。通过下面的方法来安装：</p>
<pre><code class="language-shell">yum install -y java-1.8.0-openjdk
</code></pre>
<h1 id="下载mc服务器端">下载MC服务器端</h1>
<p>这里有一个要求，就是你和你的小伙伴要拥有同样版本的MC。不同的版本对应着不同的服务器端，所以我们要下载正确的版本。如何看MC版本呢，一般进入游戏后，游戏左下角会有版本显示。知道了版本号，那么用命令就可以下载对应版本的服务器端了。需要根据版本号补全命令格式：</p>
<pre><code class="language-shell">wget https://s3.amazonaws.com/Minecraft.Download/versions/&lt;你要下载的版本号&gt;/minecraft_server.&lt;你要下载的版本号&gt;.jar

</code></pre>
<p>例子：博主这边选择安装了比较稳定的1.12版本</p>
<pre><code class="language-shell">wget https://s3.amazonaws.com/Minecraft.Download/versions/1.12/minecraft_server.1.12.jar
</code></pre>
<p>等下载提示结束后，minecraft_server.1.12.jar就躺在当前目录了。</p>
<h1 id="mc服务器启动">MC服务器，启动！</h1>
<p>我们就可以使用命令来运行MC服务器：</p>
<pre><code class="language-shell">java -Xms[初始启动分配内存] -Xmx[最大分配内存] -jar [jar包所在路径]/minecraft_server.[版本号].jar nogui
</code></pre>
<p>例子：</p>
<pre><code class="language-shell">java -Xms256m -Xmx512m -jar /home/mc/minecraft_server.1.12.jar nogui
</code></pre>
<blockquote>
<p>关于命令最后一个参数 nogui，是分开的单词 no gui，意思是不需要图形界面，这样会大大减小内存的使用，如果你的Linux是有图形界面的，就可以不打这个 nogui。</p>
</blockquote>
<h1 id="启动成功">启动成功</h1>
<p>上面的命令输入完成后，等待参数由0%一直到100%就启动完成啦！下面给出博主启动完成的后几行显示：</p>
<pre><code class="language-shell">[05:58:08] [Server thread/INFO]: Loaded 488 advancements
[05:58:08] [Server thread/INFO]: Preparing start region for level 0
[05:58:09] [Server thread/INFO]: Preparing spawn area: 0%
[05:58:10] [Server thread/INFO]: Preparing spawn area: 41%
[05:58:11] [Server thread/INFO]: Preparing spawn area: 76%
[05:58:11] [Server thread/INFO]: Done (4.263s)! For help, type &quot;help&quot; or &quot;?&quot;
</code></pre>
<h1 id="mcshell脚本启动">MC，Shell脚本启动！</h1>
<p>我们如果一直使用上面那一句启动的话是不是非常麻烦！每次都要复制粘贴，那么我们可以写一个简单的Shell脚本，放在jar包所在目录，每次启动的时候直接启动脚本就能进入游戏了。</p>
<pre><code class="language-shell">vim start-game.sh
</code></pre>
<p>编辑内容如下：</p>
<pre><code class="language-vim">#!/bin/sh

java -Xms256m -Xmx512m -jar /home/mc/minecraft_server.1.12.jar nogui
</code></pre>
<p>保存退出，每次启动游戏只需要运行下面命令即可:</p>
<pre><code class="language-shell">bash start-game.sh
</code></pre>
<h1 id="mc服务器关闭">MC服务器，关闭！</h1>
<p>按 Ctrl + C 来停止当前服务器</p>
<h1 id="mc服务起最常见的启动失败">MC服务起最常见的启动失败</h1>
<p>我们在第一次运行完jar包后，无论是否运行成功，都能发现当前目录下多出了一堆文件，运行失败的时候其实就是配置除了一点问题。我们在当前目录找一下文件：<strong>eula.txt</strong></p>
<pre><code class="language-shell">vim eula.txt
</code></pre>
<p>按i键进入编辑模式，找到如下一行把 <strong>false</strong> 改为 <strong>true</strong></p>
<pre><code class="language-vim">eula=false
</code></pre>
<p>保存退出</p>
<ul>
<li>按 <strong>esc</strong></li>
<li>输入 <strong>:wq</strong></li>
</ul>
<h1 id="客户端连接mc服务器失败">客户端连接MC服务器失败</h1>
<p>上面都启动成功之后，就可以下载对应服务器版本的客户端。下载好后启动，点击多人游戏，添加服务器，服务器地址输入我们云服务器的公网IP，就可连接上去愉快的玩耍了。但是这时候可能会发现就是怎么连接都失败，如果遇到这个情况，我们需要检查下服务器配置文件，先在jar包目录下找到文件server.propertices 并编辑：</p>
<pre><code class="language-shell">vim server.propertices
</code></pre>
<p>找到这一行</p>
<pre><code class="language-vim">online-mode:true
</code></pre>
<p>将true改为false，这是正版验证服务的设置
关于 <strong>server.propertices</strong> 文件，这边就不多做介绍了，可通过下面的链接了解详情</p>
<ul>
<li><a href="http://www.mcbbs.net/thread-569077-1-1.html">服务器配置文件详细设置</a></li>
<li><a href="https://minecraft-zh.gamepedia.com/Server.properties">我的世界WiKi</a></li>
</ul>
<h1 id="保持服务会话">保持服务会话</h1>
<p>因为博主用的是云服务器，需要通过使用ssh工具来连接到服务器启动游戏服务，但是一般服务器和ssh工具都会有连接会话的超时设置，在一段时间没有在服务器上操作后，会自动断开ssh会话，这时这个会话中的任务就会被杀掉，那小伙伴们游戏玩着玩着就<strong>与服务器断开连接</strong>了。
这个时候我们可以使用Linux上这个 <strong>GNU Screen</strong> 工具来解决上述问题</p>
<blockquote>
<p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>
</blockquote>
<h4 id="安装-screen">安装 screen</h4>
<pre><code class="language-shell">yum install -y screen
</code></pre>
<h4 id="语法">语法：</h4>
<p>screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</p>
<p>参数说明</p>
<ul>
<li>-A 　将所有的视窗都调整为目前终端机的大小。</li>
<li>-d &lt;作业名称&gt; 　将指定的screen作业离线。</li>
<li>-h &lt;行数&gt; 　指定视窗的缓冲区行数。</li>
<li>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</li>
<li>-r &lt;作业名称&gt; 　恢复离线的screen作业。</li>
<li>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</li>
<li>-s 　指定建立新视窗时，所要执行的shell。</li>
<li>-S &lt;作业名称&gt; 　指定screen作业的名称。</li>
<li>-v 　显示版本信息。</li>
<li>-x 　恢复之前离线的screen作业。</li>
<li>-ls或--list 　显示目前所有的screen作业。</li>
<li>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</li>
</ul>
<h4 id="常用screen参数">常用screen参数</h4>
<ul>
<li>screen -S yourname -&gt; 新建一个叫yourname的session</li>
<li>screen -ls -&gt; 列出当前所有的session</li>
<li>screen -r yourname -&gt; 回到yourname这个session</li>
<li>screen -d yourname -&gt; 远程detach某个session</li>
<li>screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</li>
</ul>
<h4 id="保持我们的mc服务会话">保持我们的MC服务会话</h4>
<ul>
<li>新建一个screen会话</li>
</ul>
<pre><code class="language-shell">screen -S mcs
</code></pre>
<p>当输入这个命令后，就会进入 <strong>mcs</strong> 会话，在当前会话下，输入上面的启动脚本命令，确认游戏正常启动后，就可以放着不管了，只要不是服务器挂掉了，服务就会一直运行着。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac下破解Beyond Compare]]></title>
        <id>https://zhangajian.com/post/mac-xia-po-jie-beyond-compare</id>
        <link href="https://zhangajian.com/post/mac-xia-po-jie-beyond-compare">
        </link>
        <updated>2018-12-05T07:50:59.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>1 . 去官网下载Beyond Compare并安装</p>
</li>
<li>
<p>2 . 进入Beyond Compare应用程序MacOS目录下(/Applications/Beyond Compare.app/Contents/MacOS)</p>
</li>
<li>
<p>3 . 将主启动程序BCompare重命名为BCompare.real</p>
</li>
<li>
<p>4 . 在同级目录下新建一个脚本文件命名为BCompare</p>
</li>
</ul>
<pre><code class="language-shell">vim BCompare
</code></pre>
<p>写入</p>
<pre><code class="language-vim">#!/bin/bash

rm &quot;/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat&quot;

&quot;`dirname &quot;$0&quot;`&quot;/BCompare.real $@
</code></pre>
<blockquote>
<p>ps: 代码意义，第一行是注明解释器，第二行是删除注册信息，第三行是启动真正的主程序</p>
</blockquote>
<ul>
<li>5 . 给新建的文件BCompare，授权文件执行权限</li>
</ul>
<pre><code class="language-shell">chmod a+x /Applications/Beyond\ Compare.app/Contents/MacOS/BCompare
</code></pre>
<p>这样我们每次打开软件的时候，都会先自动删掉注册信息，也就是永久免费试用了。</p>
<blockquote>
<p><a href="https://m.pythontab.com/article/1356">参考资料 - https://m.pythontab.com/article/1356</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过Certbot安装Let's Encrypt证书实现全站的HTTPS访问]]></title>
        <id>https://zhangajian.com/post/tong-guo-certbot-an-zhuang-lets-encrypt-zheng-shu-shi-xian-quan-zhan-de-https-fang-wen</id>
        <link href="https://zhangajian.com/post/tong-guo-certbot-an-zhuang-lets-encrypt-zheng-shu-shi-xian-quan-zhan-de-https-fang-wen">
        </link>
        <updated>2018-11-17T07:52:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="相关知识">相关知识</h1>
<h3 id="httphttps-是什么">HTTP/HTTPS 是什么?</h3>
<blockquote>
<p>简单来说，HTTP 是一个传输网页内容的协议，比如我们浏览一个网页，网页上的文字、图片、 CSS 、 JS 等文件都是通过 HTTP 协议传输到我们的浏览器，然后被我们看到。因为 HTTP 是明文传输的，通过 HTTP 协议传输的内容很容易被偷看和篡改，为了安全（你肯定不想被人偷看或者篡改网页内容吧，比如网站银行密码什么的。）就为 HTTP 协议再加上了一层 SSL/TLS 安全协议，所以就有了 HTTPS 。</p>
</blockquote>
<h3 id="ssltls-是什么">SSL/TLS 是什么？</h3>
<blockquote>
<p>SSL 是指安全套接字层（Secure Sockets Layer），内心纯洁的同学也可以理解为「带安全套的 HTTP」，因为带了安全套，所以当然会比较安全。TLS 是 传输层安全协议（Transport Layer Security），SSL 和 TLS 是同一个东西的不同阶段，理解为同一个东西也行，都是安全协议就对了。</p>
</blockquote>
<h3 id="为什么要部署-https">为什么要部署 HTTPS？</h3>
<blockquote>
<p>说到底，就是 HTTPS 更安全。甚至为了安全，一个专业可靠的网站， HTTPS 是必须的。 Firefox 和 Chrome 都计划将没有配置 SSL 加密的 HTTP 网站标记为不安全，目前它们也正在联合其他相关的基金会与公司推动整个互联网 HTTPS 化，现在大家访问的一些主要的网站。如 Google 多年前就已经全部启用 HTTPS ，国内的淘宝、搜狗、知乎、百度等等也全面 HTTPS 了。甚至 Google 和百度的搜索结果也正在给予 HTTPS 的网站更高的排名和优先收录权。</p>
</blockquote>
<h3 id="怎么部署-https-呢">怎么部署 HTTPS 呢？</h3>
<blockquote>
<p>你只需要有一张被信任的 CA （ Certificate Authority ）也就是证书授权中心颁发的 SSL 安全证书，并且将它部署到你的网站服务器上。一旦部署成功后，当用户访问你的网站时，浏览器会在显示的网址前加一把小绿锁，表明这个网站是安全的，当然同时你也会看到网址前的前缀变成了 HTTPS ，不再是 HTTP 了。</p>
</blockquote>
<h3 id="怎么获得-ssl-安全证书呢">怎么获得 SSL 安全证书呢？</h3>
<blockquote>
<p>理论上，我们自己也可以签发 SSL 安全证书，但是我们自己签发的安全证书不会被主流的浏览器信任，所以我们需要被信任的证书授权中心（ CA ）签发的安全证书。而一般的 SSL 安全证书签发服务都比较贵，比如 Godaddy 、 GlobalSign 等机构签发的证书一般都需要20美金一年甚至更贵，不过为了加快推广 HTTPS 的普及， EEF 电子前哨基金会、 Mozilla 基金会和美国密歇根大学成立了一个公益组织叫 ISRG （ Internet Security Research Group ），这个组织从 2015 年开始推出了 Let’s Encrypt 免费证书。这个免费证书不仅免费，而且还相当好用，所以我们就可以利用 Let’s Encrypt 提供的免费证书部署 HTTPS 了。</p>
</blockquote>
<h3 id="lets-encrypt-简介">Let’s Encrypt 简介</h3>
<blockquote>
<p>前面已经介绍过， Let’s Encrypt 是 一个叫 ISRG （ Internet Security Research Group ，互联网安全研究小组）的组织推出的免费安全证书计划。参与这个计划的组织和公司可以说是互联网顶顶重要的先驱，除了前文提到的三个牛气哄哄的发起单位外，后来又有思科（全球网络设备制造商执牛耳者）、 Akamai 加入，甚至连 Linux 基金会也加入了合作，这些大牌组织的加入保证了这个项目的可信度和可持续性。</p>
</blockquote>
<h3 id="certbot-简介">Certbot 简介</h3>
<blockquote>
<p>ISRG 的发起者 EFF （电子前哨基金会）为 Let’s Encrypt 项目发布了一个官方的客户端 Certbot ，利用它可以完全自动化的获取、部署和更新安全证书。虽然第三方工具也可以使用，但是官方工具更权威，风险也更小，而且遇到问题也更容易解决，毕竟有官方的支持。</p>
</blockquote>
<h1 id="实际操作">实际操作</h1>
<h3 id="certbot-使用方法">Certbot 使用方法</h3>
<p>Certbot 的官网是<a href="https://certbot.eff.org/">https://certbot.eff.org/</a>, 我们打开这个链接，选择自己使用的 web server 和操作系统。选择完之后，官网就会显示出对应的安装操作步骤。
以目前我所使用的服务器为例，web server 使用Nginx(1.12)，操作系统是CentOS(7.3)。因为 Certbot 打包在EPEL中，所以在安装 Certbot 之前要先安装EPEL</p>
<pre><code class="language-shell">yum -y install epel-release
</code></pre>
<p>然后按着官网给出的步骤提示命令安装 Certbot</p>
<pre><code class="language-shell">yum install python2-certbot-nginx
</code></pre>
<p>安装完毕后，继续输入官网提示命令</p>
<pre><code class="language-shell">certbot --nginx
</code></pre>
<p>运行此命令会自动获取证书，并且 Certbot 会自动编辑Nginx配置文件配置HTTPS服务。</p>
<blockquote>
<p>这边在运行配置命令时遇到一个坑</p>
</blockquote>
<pre><code class="language-shell">ImportError: No module named 'requests.packages.urllib3'
</code></pre>
<p>可以看出是缺少一个模块包，看配置命令在命令台的输出，Certbot 是用 python 来写 Nginx 配置。既然是用的 python，可以通过 <strong>pip list</strong> 命令查看 python 的依赖包列表。但是查看是已经存在的，这个问题很快通过 Certbot 在 github 上的一个 Issues 找到了答案（<a href="https://github.com/certbot/certbot/issues/5104">Issues链接</a>）。目前看是包的版本依赖有问题，执行以下命令进行依赖包的重装</p>
<pre><code class="language-shell">pip uninstall requests
pip uninstall urllib3
yum remove python-urllib3
yum remove python-requests
yum install python-urllib3
yum install python-requests
yum install certbot
</code></pre>
<p>再次执行 <strong>certbot --nginx</strong> 命令成功。命令执行后首先会提示输入一个邮箱地址，主要作用是订阅一些通知，输入后回车。</p>
<pre><code class="language-shell">[root@izuf6fco0zwyipdq9485s2z ~]# certbot --nginx
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator nginx, Installer nginx

▽
Enter email address (used for urgent renewal and security notices) (Enter 'c' to
cancel): demo@mail.com // 演示邮箱
Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</code></pre>
<p>回车后 Certbot 就会自动请求下载 Let's Encrypt 证书，并设置 Nginx 配置文件。期间会有一些同意相关协议和选择哪个网站配置的交互，这个看输出文字就能明白意思。</p>
<pre><code class="language-shell">...
▽
server {
(A)gree/(C)ancel: a

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let's Encrypt project and the non-profit
organization that develops Certbot? We'd like to send you email about our work
encrypting the web, EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: y
Starting new HTTPS connection (1): supporters.eff.org

Which names would you like to activate HTTPS for?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: kisstime.top
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to select all options shown (Enter 'c' to cancel): 1
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for kisstime.top
Cleaning up challenges
...
</code></pre>
<blockquote>
<p>但是这边到 Certbot 设置 Nginx 配置文件的时候遇到一个坑，报如下一个错误</p>
</blockquote>
<pre><code class="language-shell">An unexpected error occurred:
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe5 in position 2: ordinal not in range(128)
Please see the logfiles in /var/log/letsencrypt for more details.
</code></pre>
<p>熟悉 python 的同学应该对这个错误比较了解。不过博主 python 还是用的比较少，花了点时间了解了一下。</p>
<blockquote>
<p>在解决错误之前，首先要了解unicode和utf-8的区别。unicode指的是万国码，是一种“字码表”。而utf-8是这种字码表储存的编码方法。unicode不一定要由utf-8这种方式编成bytecode储存，也可以使用utf-16,utf-7等其他方式。目前大多都以utf-8的方式来变成bytecode。其次，Python中字符串类型分为byte string 和 unicode string两种。如果在python文件中指定编码方式为utf-8(#coding=utf-8)，那么所有带中文的字符串都会被认为是utf-8编码的byte string（例如：mystr=&quot;你好&quot;），但是在函数中所产生的字符串则被认为是unicode string。问题就出在这边，unicode string 和 byte string 是不可以混合使用的，一旦混合使用了，就会产生这样的错误。例如：</p>
</blockquote>
<pre><code class="language-python">self.response.out.write(&quot;你好&quot;+self.request.get(&quot;argu&quot;))
</code></pre>
<blockquote>
<p>其中，&quot;你好&quot;被认为是byte string，而self.request.get(&quot;argu&quot;)的返回值被认为是unicode string。由于预设的解码器是ascii，所以就不能识别中文byte string。然后就报错了。</p>
</blockquote>
<p>那理解了这个错误原因后，我这边首先想到的就是网站的 Nginx 配置文件中是否含有中文。打开一看，确实存在中文注释。将注释去掉，重新执行命令成功不在报错</p>
<p>接着命令交互会提示是否将所有HTTP重定向到HTTPS，我这边选择全部重定向也就是「2」。</p>
<pre><code class="language-shell">Cleaning up challenges
Deploying Certificate to VirtualHost:  //这边会显示你的网站配置文件目录

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2
Redirecting all traffic on port 80 to ssl in //这边会显示你的网站配置文件目录

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled https://kisstime.top

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=kisstime.top
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   .../fullchain.pem
   Your key file has been saved at:
   .../privkey.pem
   Your cert will expire on 2019-02-14. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the &quot;certonly&quot; option. To non-interactively renew *all* of
   your certificates, run &quot;certbot renew&quot;
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre>
<p>OK，当完成上面最后一步后，输入如上信息后就表明 HTTPS 配置成功了！我们可以通过提示中的 <a href="www.ssllabs.com">SSL Server Test</a> 网址来测试网站是否能够 HTTPS 来进行访问</p>
<pre><code class="language-shell">You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=kisstime.top
</code></pre>
<p>事实证明，高兴的太早了。。。通过测试网站和直接访问域名发现网站都是访问不了。思考了一下，确认下服务器的443端口是否开启，我这边用的是阿里云的服务器，登录控制台查看安全组规则，发现确实是443端口没有开启，配置开启后，重新访问成功。</p>
<h1 id="其他">其他</h1>
<h3 id="nginx的设置说明">Nginx的设置说明</h3>
<p>基本上 Certbot 会在对应的 Nginx 配置文件加上下面的参数：</p>
<pre><code class="language-nginx">server {
    # ... other configs
    
    # SSL 设置
    listen 443 ssl;

    # set crt and key
    ssl_certificate .../fullchain.pem;
    ssl_certificate_key .../privkey.pem;
    
    # include 基本的 ssl 设置
    include .../options-ssl-nginx.conf;
    
    # Certbot 也会生成一把 Diffie-Hellman 密钥
    ssl_dhparam .../ssl-dhparams.pem;

    # ... other configs
}
</code></pre>
<h3 id="自动更新证书">自动更新证书</h3>
<p>Let’s Encrypt 免费SSL证书用起来非常方便，但每次申请只有三个月有效期，在每次到期之前都需要重新申请，Certbot 已经提供了一键续订的命令</p>
<pre><code class="language-shell">certbot renew
</code></pre>
<p>我们可以通过添加此条命令的cron作业（或systemd计时器）来安排证书的自动续订</p>
<pre><code class="language-shell">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin

0 0,12 * * * certbot renew --quiet 
</code></pre>
<h3 id="certbot-的-log-路径">Certbot 的 log 路径</h3>
<p>Certbot 的 log 预设路径在 <strong>/var/log/letsencrypt</strong>，有需要可以去确认查看。</p>
<h3 id="相关第三方">相关第三方</h3>
<p><a href="https://github.com/certbot/certbot/blob/master/certbot-auto">certbot-auto</a>是对脚本certbot的封装，可以设置系统环境或自动升级。</p>
<h1 id="参考资料">参考资料</h1>
<p>牛顿曾经说过：如果说我看得比别人更远些，那是因为我站在巨人的肩膀上。（If I have seen further, it is by standing on the shoulders of giants.）感谢。</p>
<ul>
<li><a href="https://certbot.eff.org/">https://certbot.eff.org/</a></li>
<li><a href="https://linuxstory.org/deploy-lets-encrypt-ssl-certificate-with-certbot">https://linuxstory.org/deploy-lets-encrypt-ssl-certificate-with-certbot</a></li>
<li><a href="https://blog.csdn.net/use_my_heart/article/details/51303317">https://blog.csdn.net/use_my_heart/article/details/51303317</a></li>
<li><a href="https://blog.hellojcc.tw/2018/05/02/setup-https-with-letsencrypt-on-nginx/">https://blog.hellojcc.tw/2018/05/02/setup-https-with-letsencrypt-on-nginx/</a></li>
</ul>
<h1 id="博客原文链接">博客原文链接</h1>
<p><a href="https://kisstime.top/?p=123">:point_right:点击链接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac下iTerm2 SSH 免密登陆阿里云]]></title>
        <id>https://zhangajian.com/post/mac-xia-iterm2-ssh-mian-mi-deng-lu-a-li-yun</id>
        <link href="https://zhangajian.com/post/mac-xia-iterm2-ssh-mian-mi-deng-lu-a-li-yun">
        </link>
        <updated>2018-11-09T07:53:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="服务器配置">服务器配置</h1>
<p>1 登录到服务器修改sshd的配置文件</p>
<blockquote>
<p>vim  /etc/ssh/sshd_config</p>
</blockquote>
<p>找到以下内容，去掉前面的注释（#）</p>
<pre><code class="language-shell">RSAAuthentication yes 
PubkeyAuthentication yes 
AuthorizedKeysFile .ssh/authorized_keys
</code></pre>
<p>重启sshd服务</p>
<blockquote>
<p>service sshd restart</p>
</blockquote>
<h1 id="本机配置">本机配置</h1>
<p>1 本机生成公钥和私钥（已生成跳过）</p>
<blockquote>
<p>ssh-keygen -t rsa</p>
</blockquote>
<p>一路回车即可。默认在 ~/.ssh目录生成两个文件</p>
<pre><code class="language-shell">id_rsa ：私钥 
id_rsa.pub ：公钥
</code></pre>
<p>2 将本地公钥导入到服务器认证文件中</p>
<blockquote>
<p>ssh-copy-id -i ~/.ssh/id_rsa.pub root@你的公网IP</p>
</blockquote>
<p>3 修改 mac 下的配置文件 ~/.ssh/config （没有则创建）</p>
<pre><code class="language-shell">Host aliyun  ### 别名
Hostname 192.168.10.10  ###公网 IP
Port 22  ###端口
User root  ###登录账号
IdentityFile ~/.ssh/id_rsa ###本机私钥地址
</code></pre>
<p>4 使用ssh连接</p>
<blockquote>
<p>ssh aliyun</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在阿里云上部署WordPress]]></title>
        <id>https://zhangajian.com/post/zai-a-li-yun-shang-bu-shu-wordpress</id>
        <link href="https://zhangajian.com/post/zai-a-li-yun-shang-bu-shu-wordpress">
        </link>
        <updated>2018-10-18T07:54:22.000Z</updated>
        <summary type="html"><![CDATA[<p>最近刚好因为活动买了一台新的服务器，空着也空着，刚好可以用来搭博客使用，搭建博客这件事。之前也做过很多次，不管是用静态博客生成器，还是手写一个博客项目。都尝试过，思来想去，这次打算用用WordPress，听闻许久，也该用用看了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近刚好因为活动买了一台新的服务器，空着也空着，刚好可以用来搭博客使用，搭建博客这件事。之前也做过很多次，不管是用静态博客生成器，还是手写一个博客项目。都尝试过，思来想去，这次打算用用WordPress，听闻许久，也该用用看了。</p>
<!-- more -->
<h1 id="安装nginx">安装Nginx</h1>
<pre><code class="language-shell">yum -y install nginx
</code></pre>
<h1 id="安装mysql57">安装Mysql5.7</h1>
<ul>
<li>安装 mysql 官方 yum 源</li>
</ul>
<pre><code class="language-shell">rpm -ivh https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm
</code></pre>
<ul>
<li>查看 MySQL yum 源</li>
</ul>
<pre><code class="language-shell">yum list | grep mysql
</code></pre>
<p>发现只有 mysql80 的包，这是因为没有开启 mysql57 的包，关闭80包，开启57包。</p>
<pre><code class="language-shell">yum-config-manager --disable mysql80-community
yum-config-manager --enable mysql57-community
</code></pre>
<p>报错</p>
<pre><code class="language-shell">-bash: yum-config-manager: 未找到命令
</code></pre>
<p>这个是因为系统默认没有安装这个命令，这个命令在yum-utils 包里，可以通过命令yum -y install yum-utils 安装就可以了。</p>
<ul>
<li>安装 yum-utils 包</li>
</ul>
<pre><code class="language-shell">yum -y install yum-utils
</code></pre>
<ul>
<li>
<p>再次查看Mysql包列表出现57安装包</p>
</li>
<li>
<p>安装 Mysql57</p>
</li>
</ul>
<pre><code class="language-shell">yum -y install mysql-community-server
</code></pre>
<ul>
<li>启动 Mysql57服务</li>
</ul>
<pre><code class="language-shell">systemctl start mysqld
</code></pre>
<ul>
<li>查看初始密码</li>
</ul>
<pre><code class="language-shell">grep 'temporary password' /var/log/mysqld.log
</code></pre>
<ul>
<li>登录 Mysql，修改密码</li>
</ul>
<pre><code class="language-shell">mysql -uroot -p

set password for root@localhost = password('你的密码');
</code></pre>
<p>如果提示错误，那是因为 mysql57 对密码的复杂度进行了限制，依次执行下列命令，取消复杂度限制，再修改</p>
<pre><code class="language-shell">set global validate_password_policy=0;
set global validate_password_mixed_case_count=0;
set global validate_password_number_count=3;
set global validate_password_special_char_count=0;
set global validate_password_length=3;
</code></pre>
<p>提示错误</p>
<pre><code class="language-shell">[root@izuf6fco0zwyipdq9485s2z ~]# mysql -uroot -p
Enter password:
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)
</code></pre>
<ul>
<li>如下操作修复</li>
</ul>
<pre><code class="language-shell"># 先关闭服务
systemctl stop mysqld
# 跳过权限验证
mysqld --user=root --skip-grant-tables &amp;
# 登录
mysql -u root mysql
# 设置密码
UPDATE user SET authentication_string=PASSWORD('new password') where USER='root';
# 刷新设置
FLUSH PRIVILEGES;
</code></pre>
<h1 id="安装-php72">安装 PHP7.2</h1>
<p>php7.2 版本的 yum 源在 webtatic 上，但还有一部分需要依赖 epel-release 。EPEL(Extra Packages for Enterprise Linux )，是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux。</p>
<ul>
<li>安装 epel-release</li>
</ul>
<pre><code class="language-shell">yum -y install epel-release
</code></pre>
<p>安装完成后，在 /etc/yum.repos.d 目录下，就会多一个 epel.repo 的文件，还有一个 testing 的测试文件。当系统通过 yum 进行安装软件时，如果需要 epel 里的扩展包，就会自动下载安装。</p>
<ul>
<li>安装 webtatic yum 源</li>
</ul>
<pre><code class="language-shell">rpm -ivh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
</code></pre>
<p>安装完成后，在 /etc/yum.repos.d 目录下会多出 webtatic.repo 和 webtatic-archive.repo 两个文件，还有一个 testing 的测试文件。</p>
<ul>
<li>查看 php 可以安装的包</li>
</ul>
<pre><code class="language-shell"> yum list | grep php72
</code></pre>
<p>上面这些 rpm 包就是 webtatic 的 yum 源里面的包啦。我们要安装的就是 php72 的核心包 mod_php72w 和核心扩展包 php72w-cli 、php72w-fpm、php72w-common、php72w-devel。其它扩展选项包请根据需要安装，例如需要 php72w-gd 后期可单独安装。</p>
<ul>
<li>安装php72</li>
</ul>
<pre><code class="language-shell">yum -y install mod_php72w php72w-cli php72w-fpm php72w-common php72w-devel
</code></pre>
<p>通过这种方式安装的 php72 的 php.ini 文件与我们认识的不太一样，它类似于 nginx.conf 存在一个主配置，通过类型 include 方法，包含指定文件夹下的模块配置文件。</p>
<ul>
<li>启动php-fpm</li>
</ul>
<pre><code class="language-shell">systemctl start php-fpm
</code></pre>
<h1 id="安装-wordpress">安装 WordPress</h1>
<ul>
<li>下载wordpress</li>
</ul>
<pre><code class="language-shell">wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz
</code></pre>
<ul>
<li>解压到/home/目录下</li>
</ul>
<pre><code class="language-shell">tar -zxvf wordpress-4.9.4-zh_CN.tar.gz -C /home/
</code></pre>
<ul>
<li>登陆mysql并添加数据库，命名为wordpress</li>
</ul>
<pre><code class="language-shell">mysql -uroot -p
create database wordpress;
show databases;
</code></pre>
<ul>
<li>备份nginx的配置文件</li>
</ul>
<pre><code class="language-shell">cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak
</code></pre>
<ul>
<li>修改配置文件</li>
</ul>
<pre><code class="language-shell">vim /etc/nginx/conf.d/default.conf
</code></pre>
<p>重启Nginx服务时候报错，查看错误日志</p>
<pre><code class="language-shell">vim /var/log/nginx/error.log
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to 0.0.0.0:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: bind() to [::]:80 failed (98: Address already in use)
2018/11/14 17:15:23 [emerg] 14151#0: still could not bind()
</code></pre>
<p>看错误信息提示80端口已经被占用，无法重启Nginx服务，查看80端口进程是哪一个，并kill掉后，重启服务成功</p>
<pre><code class="language-shell">netstat -ntpl
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      11333/php-fpm: mast
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      10363/nginx: master
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      15636/sshd
tcp6       0      0 :::3306                 :::*                    LISTEN      10604/mysqld
tcp6       0      0 :::80                   :::*                    LISTEN      10363/nginx: master
kill 10363
service nginx restart
</code></pre>
<ul>
<li>访问域名后显示WP的安装，我们点击进行填写mysql的用户名和密码</li>
</ul>
<p>数据用户名和密码填写后报错</p>
<blockquote>
<p>抱歉，我不能写入wp-config.php文件 ......</p>
</blockquote>
<p>查看wordpress文件夹，发现是权限问题</p>
<pre><code class="language-shell">ll /home | grep wordpress
drwxr-xr-x 5 nobody 65534 4096 2月   8 2018 wordpress
</code></pre>
<ul>
<li>查看用户组</li>
</ul>
<pre><code class="language-shell">grep -E '^(user|group)' /etc/php-fpm.d/www.conf
user = apache
group = apache
</code></pre>
<ul>
<li>设置访问权限</li>
</ul>
<pre><code class="language-shell">chown -R apache:apache /home/wordpress
</code></pre>
<h1 id="再次访问成功">再次访问成功！</h1>
<p>参开链接：
https://laravel-china.org/articles/10803/this-weekend-theres-a-lot-of-pits-on-the-website-for-a-friend-to-do
https://blog.csdn.net/u011475134/article/details/80222098
https://laravel-china.org/articles/17377#296073</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[伏梦]]></title>
        <id>https://zhangajian.com/post/fu-meng</id>
        <link href="https://zhangajian.com/post/fu-meng">
        </link>
        <updated>2018-09-10T07:55:27.000Z</updated>
        <content type="html"><![CDATA[<p>前阵子感冒了，不算严重。期间去过趟医院打针吃药。</p>
<p>那天是周五，请了一天假，下午回家后吃完药。就觉的特别的困，可能是前几天实在没有睡好，也可能是药效起的作用。这一觉睡了有个9小时。</p>
<p>这之间做了一个梦，算是噩梦。但没有突然的惊醒，浑身冷汗。只感觉睡了好久好久，醒后觉的浑身无力。</p>
<p>但这个梦却莹莹沥沥。它是一个故事，不知道是从前哪里看的小说还是哪部电影中留下的碎念。所以，我决定将它稍加改动记录下来：</p>
<p>一个女孩，外衣深黑色针织衫，里面穿着一件白色衬衫，红色格子百褶裙，柔柔弱弱的印象。在一家咖啡店中，靠窗的位置坐着，像是在完成学业。</p>
<p>突然电话响了，应该是一位好友的来电。女孩说：「不知道哦，挺久没联系了，可能不喜欢我了。打算用这种方式分手吧」。</p>
<p>没一会就挂了电话，女孩看了会窗外。用力的咳嗽了几下，从包里拿出了一瓶感冒药，看来也是重感冒，倒了两颗药出来，胶囊状的，瓶子上像是写着女孩的名字。拿起桌子上的水杯服了下去。</p>
<p>不久，女孩起身准备离开，拿起桌子上的书籍和文件。出了咖啡店。像是去往家的路上，路上的风景似曾相识。有一颗无花果树攀出围墙，果子红红郁郁，似血似肉。</p>
<p>女孩到了住处，习惯性的打开楼道门口的信箱，检查是否有来信。翻开信箱盖子，里面一封白色信封静静的躺在黑色的信盒中。女孩邹了下眉头，像是疑问。拿起信封翻看了一下，两面都是空白一片，没有署名，没有地址，没有邮编，是一封匿名信。</p>
<p>女孩撕开信封，里面只有一张照片。拿起一看，顿时被吓了一跳，照片也被抖到了地上。地面上的照片中是一个人被烧死的照片，只有上半身，却血肉模糊，狰狞发呕。照片随着画面一步一步放大。（我也吓死了😭）</p>
<p>画面一转，女孩在家中打着电话：「不会是恶作剧吧，太变态了。本来最近重感冒难受的要死，还有那么多门毕业考试要准备。烦死了」「有点害怕唉，要不报警吧？但是这些估计最多也就立个案」「哎呀，真的和他挺久没联系了，估计想用这种方式逼我先提出分手，他不理我，我也不理他，哼」「好呀，好呀，现在我就过去，在这今晚我肯定睡不着」。</p>
<p>第二天早上，女孩和好友道了别，应该是回去拿一些重要的东西。再次来到楼道门口，女孩看了下信箱，拍了拍胸口呼了一口气，像是给自己打气。再次打开信箱，这次里面躺着两封信，女孩有些惊讶，拿起信封，一封清晰的印着是什么医师证书的回寄，而另外一封又是和昨天一样，双面空白，又是一封匿名信。</p>
<p>女孩犹豫着要不要打开，「又是昨天那样的恶作剧？」，女孩还是撕开了这封匿名信，这次还是一张照片。一只手正在一个昏暗的房间中，拿着一个锤子敲碎着一具尸体的骨架。这次女孩镇定了很多，「我可是学医的，这吓不到我，死变态」，女孩把照片塞了回去，将信封直接扔进了边上的垃圾桶中。</p>
<p>第三天早上，女孩整装待发，走出楼道，经过信箱时，突然有些犹豫。但还是慢慢的转身走向信箱，翻开信箱盖子，里面又躺着一份双面空白的匿名信。「我靠，有完没完」，女孩取出了这封新的信，快速的撕开了信封。这次信封中是两张照片。第一张，一只手将骨灰塞进一个像香烟头的小模具中，大拇指手指甲上还涂着鲜红的指甲油。女孩皱了下眉头，拿起另外一张。</p>
<p>另一张，则是一个被装满药囊瓶子的特写。</p>
<p>女孩突然懵了一下，好像意识到了什么。快速翻起自己包中的感冒药瓶子，和照片做了下比对。女孩干呕了声，将手中的照片和药瓶子扔在了地上，双手捂住了嘴巴，惊恐的退到了墙上。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这个周末上线一个帮朋友做的网站，遇到挺多坑，记录一下]]></title>
        <id>https://zhangajian.com/post/zhe-ge-zhou-mo-shang-xian-yi-ge-bang-peng-you-zuo-de-wang-zhan-yu-dao-ting-duo-keng-ji-lu-yi-xia</id>
        <link href="https://zhangajian.com/post/zhe-ge-zhou-mo-shang-xian-yi-ge-bang-peng-you-zuo-de-wang-zhan-yu-dao-ting-duo-keng-ji-lu-yi-xia">
        </link>
        <updated>2018-05-07T07:56:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="网站上线流程">网站上线流程</h1>
<ul>
<li>
<h4 id="购买服务器目前选择的是阿里云服务器选择的是入门型1核1g实例">购买服务器，目前选择的是阿里云服务器，选择的是入门型1核1G实例</h4>
</li>
<li>
<h5 id="配置ssh连接">配置SSH连接</h5>
<blockquote>
<ul>
<li>增加本机ssh连接配置，一般激活实例后，ssh的22端口是默认开放的，可以直接通过root用户进行登录配置部署环境，</li>
<li>登录到服务器后，将自己的公钥加入到 <strong>~/.ssh/authorized_keys</strong> 配置文件中就可直接通过秘钥进行登录</li>
</ul>
</blockquote>
</li>
<li>
<h5 id="服务器配置">服务器配置</h5>
<blockquote>
<ul>
<li>服务器系统版本：CentOS Linux release 7.4.1708 (Core)</li>
<li>内存：1G</li>
<li>CPU：1核</li>
<li>硬盘：40G</li>
</ul>
</blockquote>
<h1 id="一-安装mysql55">一. 安装Mysql5.5</h1>
<p>因为服务器配置有点低，所以这边选择安装比较低的mysql版本。从CentOS 7.0发布以来，yum源中开始使用mariadb来代替MySQL的安装。即使你输入的是yum install mysql , 显示的也是mariadb的安装内容，因此，如果使用yum安装MySQL的话，就需要去下载官方指定的yum源。</p>
<p>网址：<a href="https://dev.mysql.com/downloads/repo/yum/"> https://dev.mysql.com/downloads/repo/yum/</a>。</p>
<p><strong>1. 先卸载mariadb，查看mariadb是否已经安装</strong></p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]#  yum list installed | grep mariadb
mariadb-libs.x86_64                     1:5.5.56-2.el7                 @anaconda
</code></pre>
<p>进行卸载</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# yum -y remove mariadb*
Loaded plugins: fastestmirror
Resolving Dependencies
...... 	**省略过程**

Removed:
  mariadb-libs.x86_64 1:5.5.56-2.el7

Dependency Removed:
  postfix.x86_64 2:2.10.1-6.el7                                                                redhat-lsb-core.x86_64 0:4.1-27.el7.centos.1

Complete!
</code></pre>
<p><strong>2. 获取yum源和数据库安装，<a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/#repo-qg-yum-fresh-install">官方指南</a></strong></p>
<pre><code class="language-shell">wget http://repo.mysql.com/yum/mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm 	#MySQL5.5yum源
</code></pre>
<p>安装yum源</p>
<pre><code class="language-shell">rpm -ivh mysql-5.5-community/el/6/x86_64/mysql-community-release-el6-5.noarch.rpm 
</code></pre>
<p>安装好yum源后，需要修改一下配置文件，文件路径在 <strong>/etc/yum.repos.d/mysql-community.repo</strong>，要将5.5的enabled改为1，而5.6的enabled改为0</p>
<pre><code class="language-shell"># Enable to use MySQL 5.5
[mysql55-community]
name=MySQL 5.5 Community Server
baseurl=http://repo.mysql.com/yum/mysql-5.5-community/el/6/$basearch/
enabled=1
gpgcheck=1
gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql

# Enable to use MySQL 5.6
[mysql56-community]
name=MySQL 5.6 Community Server
baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/6/$basearch/
enabled=0
gpgcheck=1
gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql

# Note: MySQL 5.7 is currently in development. For use at your own risk.
# Please read with sub pages: https://dev.mysql.com/doc/relnotes/mysql/5.7/en/
[mysql57-community-dmr]
name=MySQL 5.7 Community Server Development Milestone Release
baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/
enabled=0
gpgcheck=1
gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql
</code></pre>
<p>修改后保存退出，开始安装MySQL。在安装之前，可以查看下是否已有MySQL可安装文件</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# yum repolist enabled | grep &quot;mysql.*-community.*&quot;
mysql-connectors-community/x86_64 MySQL Connectors Community                  49
mysql-tools-community/x86_64      MySQL Tools Community                       61
mysql55-community/x86_64          MySQL 5.5 Community Server                 449
</code></pre>
<p><strong>3. 安装mysql</strong></p>
<pre><code class="language-shell"># 安装client，devel，server
yum install mysql-community-client mysql-community-devel mysql-community-server
</code></pre>
<p>安装完毕后，可以查看下当前mysql版本</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# rpm -qi mysql-community-server
Name        : mysql-community-server
Version     : 5.5.60
Release     : 2.el6
Architecture: x86_64
Install Date: 2018年05月05日 星期六 16:26:00
......
</code></pre>
<p><strong>4. 启动mysql</strong></p>
<p>执行 <strong>service mysqld start</strong> 启动mysql</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# service mysqld start
Starting mysqld (via systemctl):                           [  OK  ]
</code></pre>
<p>ok，mysql安装完毕</p>
<blockquote>
<p>常用命令：</p>
<p><strong>systemctl start mysqld    #启动mysqld</strong></p>
<p><strong>systemctl stop mysqld    #停止mysqld</strong></p>
<p><strong>systemctl restart mysqld    #重启mysqld</strong></p>
<p><strong>systemctl enable mysqld   #设置开机启动</strong></p>
<p><strong>systemctl status mysqld    #查看 MySQL Server 状态</strong></p>
</blockquote>
<p><strong>5. 数据库安全设置</strong></p>
<p>设置mysql root账户密码</p>
<pre><code class="language-shell"># mysqladmin -u root password 'new password'
</code></pre>
<p>重新登录mysql报如下错误</p>
<pre><code class="language-shell">ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)
</code></pre>
<p>执行如下命令进行解决</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# systemctl stop mysqld		**关闭mysql服务**
[root@iZbp17dq2xryqoixibq5u1Z ~]# mysqld --user=root --skip-grant-tables &amp;		**关闭skip-grant-tables**
[1] 32163
[root@iZbp17dq2xryqoixibq5u1Z ~]# 180505 16:57:08 [Note] mysqld (mysqld 5.5.60) starting as process 32163 ...
180505 16:57:08 [Note] Plugin 'FEDERATED' is disabled.
180505 16:57:08 InnoDB: The InnoDB memory heap is disabled
180505 16:57:08 InnoDB: Mutexes and rw_locks use GCC atomic builtins
180505 16:57:08 InnoDB: Compressed tables use zlib 1.2.3
180505 16:57:08 InnoDB: Using Linux native AIO
180505 16:57:08 InnoDB: Initializing buffer pool, size = 128.0M
180505 16:57:08 InnoDB: Completed initialization of buffer pool
180505 16:57:08 InnoDB: highest supported file format is Barracuda.
180505 16:57:08  InnoDB: Waiting for the background threads to start
180505 16:57:09 InnoDB: 5.5.60 started; log sequence number 1595675
180505 16:57:09 [Note] Server hostname (bind-address): '0.0.0.0'; port: 3306
180505 16:57:09 [Note]   - '0.0.0.0' resolves to '0.0.0.0';
180505 16:57:09 [Note] Server socket created on IP: '0.0.0.0'.
180505 16:57:09 [Note] mysqld: ready for connections.
Version: '5.5.60'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MySQL Community Server (GPL)
mysql -u root mysql		**空密码登入**
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.5.60 MySQL Community Server (GPL)

Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; UPDATE user SET authentication_string=PASSWORD('new password') where USER='root';		**重新设置root密码**
Query OK, 4 rows affected (0.00 sec)
Rows matched: 4  Changed: 4  Warnings: 0

mysql&gt; FLUSH PRIVILEGES;		**刷新设置**
Query OK, 0 rows affected (0.00 sec)

mysql&gt; quit
Bye
</code></pre>
<h1 id="二-安装php环境">二. 安装PHP环境</h1>
<p><strong>1. 开始安装PHP和PHP-FPM</strong></p>
<p>首先安装EPEL。EPEL即Extra Packages for Enterprise Linux的简称，是为企业级Linux提供的一组高质量的额外软件包</p>
<pre><code class="language-shell">yum -y install epel-release
</code></pre>
<p>安装PHP和PHP-FPM</p>
<pre><code class="language-shell">yum -y install php php-fpm
</code></pre>
<p>查看PHP版本</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# php -v
PHP 5.4.16 (cli) (built: Mar  7 2018 13:34:47)
Copyright (c) 1997-2013 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies
</code></pre>
<p>这时发现PHP版本是5.4的，原因是yum默认的epel-release源太低了，而我需要部署的网站是基于Laravel5.5开发的，环境要求：</p>
<blockquote>
<ul>
<li><strong>PHP &gt;= 7.0.0</strong>		需要重新安装PHP7</li>
<li>PHP OpenSSL 扩展</li>
<li>PHP PDO 扩展</li>
<li>PHP Mbstring 扩展</li>
<li>PHP Tokenizer 扩展</li>
<li>PHP XML 扩展</li>
</ul>
</blockquote>
<p>删除之前安装的PHP版本</p>
<pre><code class="language-shell">yum remove php* php-common
</code></pre>
<p>我们需要更换下rpm源，搜索epel-release源并删除后进行更新</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# rpm -qa | grep epel
epel-release-7-11.noarch
[root@iZbp17dq2xryqoixibq5u1Z ~]# rpm -e epel-release-7-11.noarch
warning: /etc/yum.repos.d/epel.repo saved as /etc/yum.repos.d/epel.repo.rpmsave
[root@iZbp17dq2xryqoixibq5u1Z ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm
Retrieving https://mirror.webtatic.com/yum/el7/epel-release.rpm
warning: /var/tmp/rpm-tmp.PHnPwl: Header V4 RSA/SHA1 Signature, key ID 62e74ca5: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:epel-release-7-5                 ################################# [100%]
[root@iZbp17dq2xryqoixibq5u1Z ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
Retrieving https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
warning: /var/tmp/rpm-tmp.ohTozh: Header V4 RSA/SHA1 Signature, key ID 62e74ca5: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:webtatic-release-7-3             ################################# [100%]
</code></pre>
<p>重新安装PHP和一些相关扩展</p>
<pre><code class="language-shell">yum install php72w-cli.x86_64 php72w-common.x86_64 php72w-gd.x86_64 php72w-ldap.x86_64 php72w-mbstring.x86_64 php72w-pdo.x86_64
</code></pre>
<p>安装PHP-FPM</p>
<pre><code class="language-shell">yum install php72w-fpm
</code></pre>
<p>再次查看PHP版本</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# php -v
PHP 7.2.4 (cli) (built: Mar 30 2018 08:49:13) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
</code></pre>
<p>启动PHP-FPM</p>
<pre><code class="language-shell">systemctl start php-fpm
systemctl enable php-fpm.service		**开机自启动**
</code></pre>
<p>常用命令：</p>
<blockquote>
<p>systemctl start php-fpm		# 启动</p>
<p>systemctl stop php-fpm		# 停止</p>
<p>systemctl restart php-fpm		# 重启</p>
<p>systemctl enable php-fpm		#开机自启动</p>
</blockquote>
<h1 id="三-安装nginx">三. 安装Nginx</h1>
<p><strong>1. 开始Nginx</strong></p>
<pre><code class="language-shell">yum install nginx
</code></pre>
<p>安装完毕后，启动Nginx</p>
<pre><code class="language-shell">systemctl start nginx
systemctl enable nginx		**系统启动时自动启动Nginx**
</code></pre>
<p>常用命令：</p>
<blockquote>
<p>fuser -k 80/tcp                     # 杀死80端口</p>
<p>nginx -s stop      # 停止</p>
<p>nginx -s reopen    # 重启</p>
<p>nginx -s reload    # 重新载入配置文件</p>
</blockquote>
<h1 id="四-网站部署">四. 网站部署</h1>
<p><strong>1. 生成秘钥</strong></p>
<pre><code class="language-shell">ssh-keygen -t rsa
</code></pre>
<p>提示一直回车就行，将生成的秘钥添加到项目托管的git库网站上，因为我的网站是放在Coding上，我直接添加在了项目部署秘钥</p>
<p><strong>2. 克隆项目</strong></p>
<p>通过 <strong>git clone</strong> 命令将项目拉取到服务器上，我这边因为是Nginx，所以我拉取到 <strong>/var/www/</strong> 目录下，</p>
<p><strong>3. 安装composer</strong></p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z project_fjylhjjsyxgs]# curl -sS https://getcomposer.org/installer | php
All settings correct for using Composer
Downloading...

Composer (version 1.6.5) successfully installed to: /var/www/project_fjylhjjsyxgs/composer.phar
Use it: php composer.phar
</code></pre>
<p>移动composer.phar文件到/usr/local/bin目录下 ，使命令全局可用，并更换Packagist中国全量镜像</p>
<pre><code class="language-shell">mv composer.phar /usr/local/bin/composer
composer config -g repo.packagist composer https://packagist.phpcomposer.com
</code></pre>
<p>通过composer安装项目依赖，但是出现了报错</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z project_fjylhjjsyxgs]# composer install
Loading composer repositories with package information
Installing dependencies (including require-dev) from lock file
Your requirements could not be resolved to an installable set of packages.

  Problem 1
    - Installation request for phar-io/manifest 1.0.1 -&gt; satisfiable by phar-io/manifest[1.0.1].
    - phar-io/manifest 1.0.1 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.
  Problem 2
    - Installation request for phpunit/php-code-coverage 5.3.0 -&gt; satisfiable by phpunit/php-code-coverage[5.3.0].
    - phpunit/php-code-coverage 5.3.0 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.
  Problem 3
    - Installation request for phpunit/phpunit 6.5.7 -&gt; satisfiable by phpunit/phpunit[6.5.7].
    - phpunit/phpunit 6.5.7 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.
  Problem 4
    - Installation request for theseer/tokenizer 1.1.0 -&gt; satisfiable by theseer/tokenizer[1.1.0].
    - theseer/tokenizer 1.1.0 requires ext-dom * -&gt; the requested PHP extension dom is missing from your system.

  To enable extensions, verify that they are enabled in your .ini files:
    - /etc/php.ini
    - /etc/php.d/bz2.ini
    - /etc/php.d/calendar.ini
    - /etc/php.d/ctype.ini
    - /etc/php.d/curl.ini
    - /etc/php.d/exif.ini
    - /etc/php.d/fileinfo.ini
    - /etc/php.d/ftp.ini
    - /etc/php.d/gd.ini
    - /etc/php.d/gettext.ini
    - /etc/php.d/gmp.ini
    - /etc/php.d/iconv.ini
    - /etc/php.d/json.ini
    - /etc/php.d/ldap.ini
    - /etc/php.d/mbstring.ini
    - /etc/php.d/pdo.ini
    - /etc/php.d/pdo_sqlite.ini
    - /etc/php.d/phar.ini
    - /etc/php.d/shmop.ini
    - /etc/php.d/simplexml.ini
    - /etc/php.d/sockets.ini
    - /etc/php.d/sqlite3.ini
    - /etc/php.d/tokenizer.ini
    - /etc/php.d/xml.ini
    - /etc/php.d/zip.ini
  You can also run `php --ini` inside terminal to see which files are used by PHP in CLI mode.
</code></pre>
<p>Google后发现，php-xml扩展有以上需要的相关软件包</p>
<pre><code class="language-shell">yum install php72w-xml.x86_64
</code></pre>
<p>重新执行composer install命令，依赖下载成功</p>
<p>开始配置Nginx配置</p>
<p>我本机<strong>homestead</strong>中的Nginx是通过 <strong>/etc/nginx/sites-available</strong> 目录设置对应多域名的nginx配置文件，但是不知道服务器上安装的Nginx，却没有这个目录，所以查看了下Nginx.conf文件，发现http模块中有如下一条配置</p>
<pre><code class="language-shell">	本机homestead中Nginx.conf
	##
    # Virtual Host Configs
    ##
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
    
    服务器上安装的Nginx.conf
	# Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
</code></pre>
<p>那好吧，我估计sites-available也是软连接的conf.d或者sites-enabled目录吧，所以我就直接将官方手册中Nginx配置复制了一份到/etc/nginx/conf.d/域名.conf，修改了一些配置</p>
<pre><code class="language-shell">server {
    listen 80;
    server_name 域名或公网IP;
    root 项目地址指向到public目录;

    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;
    add_header X-XSS-Protection &quot;1; mode=block&quot;;
    add_header X-Content-Type-Options &quot;nosniff&quot;;

    index index.html index.htm index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;		**这里有个坑下面讲**
        fastcgi_index index.php;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
</code></pre>
<p>配置完毕，保存退出，通过域名访问，发现报502错误，查看下Nginx的错误日志，发现报如下错误</p>
<pre><code class="language-shell">2018/05/06 20:17:37 [crit] 5898#0: *66 connect() to unix:/var/run/php/php7.2-fpm.sock failed (2: No such file or directory) while connecting to upstream,
</code></pre>
<p>简单的讲下，php-fpm.sock文件就是让Nginx和PHP-FPM的进程间进行通信的文件，具体的含义，这边就不做详细介绍了。进这个目录查看下是否存在这个目录或文件，发现两个问题：</p>
<ul>
<li>目录错误，不是/var/run/php，而是/var/run/php-fpm</li>
<li>php7.2-fpm.sock这个文件未生成</li>
</ul>
<p><strong>未生成原因</strong>：php5.3之后的版本，php-fpm.conf里的listen的默认配置是127.0.0.1:9000，也就是tcp的方式，不会生成php-fpm.sock。</p>
<p>因为这次上线的网站没有什么并发量，unix socket方式要比tcp的方式快而且消耗资源少，所以我还是采用unix socket方式。定位到问题后，修改下 <strong>/etc/php-fpm.d/www.conf</strong>，也就是php-fpm的配置文件，关闭原来的listen方式，然后重启下php-fpm</p>
<pre><code class="language-shell">;listen = 127.0.0.1:9000
listen = /var/run/php-fpm/php7.2-fpm.sock
</code></pre>
<p>这个时候，由于职业习惯，想把Nginx也重启下，然后就又碰到了一个问题</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z project_fjylhjjsyxgs]# nginx -s stop
[root@iZbp17dq2xryqoixibq5u1Z project_fjylhjjsyxgs]# nginx -s reload
nginx: [error] open() &quot;/run/nginx.pid&quot; failed (2: No such file or directory)
</code></pre>
<p>这应该是因为把Nginx进程杀死后pid丢失了，下一次再开启nginx -s reload时无法启动。再次面向Google编程，发现还有挺多人碰到这个问题，所以解决方法马上就能搜索到了，执行如下命令</p>
<pre><code class="language-shell">nginx -c /etc/nginx/nginx.conf
nginx -s reload
</code></pre>
<p>ok，接着Navicat远程连接到服务器数据库，source下数据库完毕。现看起来应该是可以跑起网站来了。再次访问域名，发现还是502，再次查看Nginx日志，报如下错误：</p>
<pre><code class="language-shell">2018/05/06 20:37:00 [crit] 6078#0: *1 connect() to unix:/var/run/php-fpm/php7.2-fpm.sock failed (13: Permission denied) while connecting to upstream,
</code></pre>
<p>和上面报错看起来差不多，但是这次主要问题出在跑Nginx的用户是Nginx，而php-fpm.sock这个文件，监听的Nginx用户没有该权限，导致Nginx无法访问php-fpm.sock这个文件，自然监听就失去了效果，再次修改php-fpm配置文件和重启下php-fpm</p>
<pre><code class="language-shell">; Set permissions for unix socket, if one is used. In Linux, read/write
; permissions must be set in order to allow connections from a web server. Many
; BSD-derived systems allow connections regardless of permissions.
; Default Values: user and group are set as the running user
;                 mode is set to 0660
listen.owner = nginx
listen.group = nginx
listen.mode = 0660
</code></pre>
<p>重新访问下域名，发现访问任何路由都是白屏，这次状态码都是200了，但是没有任何输出，再次面向Google编程……发现问题：</p>
<blockquote>
<p>由于nginx与php-fpm之间的一个小bug，会导致这样的现象： 网站中的静态页面 <em>.html 都能正常访问，而</em> .php 文件虽然会返回200状态码， 但实际输出给浏览器的页面内容却是空白。 简而言之，原因是nginx无法正确的将 *.php 文件的地址传递给php-fpm去解析， 相当于php-fpm接受到了请求，但这请求却指向一个不存在的文件，于是返回空结果。 为了解决这个问题，需要改动nginx默认的fastcgiparams配置文件</p>
</blockquote>
<p>在 <strong>/etc/nginx/fastcgi_params</strong> 文件的最后增加两行：</p>
<pre><code class="language-shell">fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;  
fastcgi_param PATH_INFO     $fastcgi_script_name;  
</code></pre>
<p>再再再次访问域名，终于正常显示了，但是页面上又出现了新的错误：</p>
<blockquote>
<p><strong>could not find driver（select * from users where deleted = 0）</strong></p>
</blockquote>
<p>任何有sql查询的页面都报如上错误，这个错误多半是因为pdo_mysql未打开或者未安装此模块造成，执行 <strong>php -m</strong> 发现还真没装，安装php72w-mysql的又遇到一个坑</p>
<pre><code class="language-shell">yum install php72w-mysql
</code></pre>
<p>报如下错误，说缺少libmysqlclient.so.18依赖</p>
<pre><code class="language-shell">......
error: package: php72w-mysql 
requires: libmysqlclient.so.18(libmysqlclient_18)(64bit)
Available: 1:mariadb-libs-5.5.52-1.el7.x86_64 (base)
           libmysqlclient.so.18(libmysqlclient_18)(64bit)
......
</code></pre>
<p>这就很奇怪了，查看用户库文件目录内libmysqlclient.so.18已经存在</p>
<pre><code class="language-shell">[root@iZbp17dq2xryqoixibq5u1Z ~]# ll /usr/lib64/mysql/libmysqlclient.so.18
libmysqlclient.so.18      libmysqlclient.so.18.1.0
</code></pre>
<p>这个坑花了一个小时，Google多次尝试无果后，认真思考下可能的原因，想了想可能是mysql版本的问题，修改下 <strong>/etc/yum.repos.d/mysql-community.repo</strong> 配置文件，将5.6的enabled设为1，5.5设为0，更新Mysql版本后，再次执行 <strong>yum install php72w-mysql</strong> 成功安装pdo_mysql模块…...</p>
<h1 id="至此网站访问终于成功">至此，网站访问终于成功！</h1>
<p>后续的部署优化，另外开篇记录。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP的软件包管理系统-Composer]]></title>
        <id>https://zhangajian.com/post/php-de-ruan-jian-bao-guan-li-xi-tong-composer</id>
        <link href="https://zhangajian.com/post/php-de-ruan-jian-bao-guan-li-xi-tong-composer">
        </link>
        <updated>2017-10-07T07:57:56.000Z</updated>
        <content type="html"><![CDATA[<img src="https://getcomposer.org/img/logo-composer-transparent.png" style="zoom:50%" alt="composer" />  
<h1 id="一-what-is-composer">一. What is composer?</h1>
<blockquote>
<p>是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。  ---- <a href="http://docs.phpcomposer.com/00-intro.html">Composer文档</a></p>
</blockquote>
<p>这边的依赖可以理解为各种开发包或者插件，当我们在项目中要使用第三方工具库的时候，我们往往要从官网或者一些别的其他途径来获取源文件，并放入到自己的项目中，在使用的时候，通过手动<strong>require</strong>的方式引用。当然我们大部分会通过写一个<strong>自动加载</strong>方法来进行<strong>require</strong>。但当我们使用比较大的第三方工具库时，可能它的其中又去依赖了更多别的第三方包。而且往往有时候工具库的版本更新可能会不兼容旧版本，我们手动去进行依赖那将会是一件痛苦的事情。<br/></p>
<h4 id="那么compser能为我们解决哪些问题">那么Compser能为我们解决哪些问题：</h4>
<blockquote>
<ul>
<li>a) 你有一个项目依赖于若干个库。</li>
<li>b) 其中一些库依赖于其他库。</li>
<li>c) 你声明你所依赖的东西。</li>
<li>d) Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。</li>
</ul>
</blockquote>
 <br>
<h1 id="二-开始使用composer">二. 开始使用Composer</h1>
<blockquote>
<p>系统要求: 运行 Composer 需要 PHP 5.3.2+ 以上版本。<br/>
安装Composer: <a href="http://docs.phpcomposer.com/00-intro.html#Installation-*nix">Composer文档-安装</a></p>
</blockquote>
<h4 id="composer的包版本符号">Composer的包版本符号</h4>
<p>composer的依赖声明通常都写在项目根目录下的<strong>composer.json</strong>文件中，通过<strong>JSON format</strong>的方式进行编写，就像这样子：</p>
<pre><code>{
    &quot;require&quot;: {
        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;
    }
}
</code></pre>
<p><strong>require</strong>是指定Key，我们需要做的，就是在这个指定key中增加我们需要的依赖包 (&quot;monolog/monolog&quot;) 和指定的版本 (&quot;1.0.*&quot;),那么在使用前，首先我们需要知道composer中是怎么声明我们需要依赖的包版本的
<a href="https://docs.phpcomposer.com/01-basic-usage.html#Package-Versions" title="点击链接查看">:point_right:点击链接查看</a></p>
<h4 id="composer-install和update">Composer install和update</h4>
<p>如果composer已经安装成功的话，可以直接在命令行中执行 &quot;composer&quot; 命令来查看命令列表，但在大部分的时候，使用频率最高的是<strong>install</strong>和<strong>update</strong>命令，顾名思义就是使用composer安装和更新依赖包。比如我们已经在项目的composer.json中声明了依赖</p>
<pre><code>{
  &quot;require&quot;:{
    &quot;mustache/mustache&quot;:&quot;2.8.0&quot;
  }
}
</code></pre>
<p>在命令行中直接执行 &quot;composer install&quot;，就能直接将这个工具库依赖到我们系统中</p>
<pre><code>$ composer install
Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 1 install, 0 updates, 0 removals
  - Installing mustache/mustache (v2.8.0): Downloading (100%)
Writing lock file
Generating autoload files
</code></pre>
<p>再打开项目文件夹，就能发现新增了<strong>vendor</strong>文件夹和<strong>composer.lock</strong>文件，vendor目录存放是composer的<strong>自动加载</strong>文件和我们刚刚下载的工具库，composer.lock文件是在安装依赖后，composer将把安装时确切的版本号列表(composer.json定义的)写入composer.lock 文件中，锁定项目所使用的包版本。<strong>这样做的意义是：</strong></p>
<blockquote>
<ol>
<li>在提交项目的时候，请将lock文件也提交，这样在团队开发中，如果有别的成员进入开发，建立项目时都将下载与指定版本完全相同的依赖，减轻潜在的部署错误。</li>
<li>当我们的项目搁浅很久，在几个月后重新安装项目，也能正常的继续工作，尽管可能项目的依赖包已经发布了很多新版本。</li>
</ol>
</blockquote>
<p>所以，如果已经存在lock文件的话，我们要更新在使用的依赖，这时候就需要执行 &quot;composer update&quot; 命令进行更新，update命令会从新读取composer.json的文件，更新所声明依赖版本并重新读写composer.lock文件。这边我将composer.json中的依赖版本声明为 &quot;v2.9.0&quot;执行命令</p>
<pre><code>$ composer update
Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 0 installs, 1 update, 0 removals
  - Updating mustache/mustache (v2.8.0 =&gt; v2.9.0): Loading from cache
Writing lock file
Generating autoload files
</code></pre>
<p>可以通过 &quot;composer show -i&quot; 命令查看当前已经安装的依赖包版本</p>
<pre><code>$ composer show -i
mustache/mustache v2.9.0 A Mustache implementation in PHP.
</code></pre>
<h1 id="三-在项目中使用依赖包">三. 在项目中使用依赖包</h1>
<p>composer提供了<strong>自动加载</strong>文件来提供自动加载支持，我们只要在项目的入口文件中添加这行代码</p>
<pre><code class="language-php">&lt;?php
    require &quot;vendor/autoload.php&quot;;

    $obj = new Mustache_Engine();
    $obj-&gt;render('Hello world');
</code></pre>
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/monokai.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>]]></content>
    </entry>
</feed>